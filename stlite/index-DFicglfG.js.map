{"version":3,"file":"index-DFicglfG.js","sources":["../../../streamlit/frontend/lib/src/components/widgets/TextInput/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/TextInput/TextInput.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledTextInput = styled.div`\n  position: relative;\n`\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { memo, ReactElement, useCallback, useState } from \"react\"\n\nimport { Input as UIInput } from \"baseui/input\"\nimport uniqueId from \"lodash/uniqueId\"\n\nimport { TextInput as TextInputProto } from \"@streamlit/protobuf\"\n\nimport { DynamicIcon } from \"~lib/components/shared/Icon\"\nimport InputInstructions from \"~lib/components/shared/InputInstructions/InputInstructions\"\nimport { Placement } from \"~lib/components/shared/Tooltip\"\nimport TooltipIcon from \"~lib/components/shared/TooltipIcon\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"~lib/components/widgets/BaseWidget\"\nimport {\n  useBasicWidgetState,\n  ValueWithSource,\n} from \"~lib/hooks/useBasicWidgetState\"\nimport { useCalculatedWidth } from \"~lib/hooks/useCalculatedWidth\"\nimport { useEmotionTheme } from \"~lib/hooks/useEmotionTheme\"\nimport useOnInputChange from \"~lib/hooks/useOnInputChange\"\nimport useSubmitFormViaEnterKey from \"~lib/hooks/useSubmitFormViaEnterKey\"\nimport useUpdateUiValue from \"~lib/hooks/useUpdateUiValue\"\nimport { isInForm, labelVisibilityProtoValueToEnum } from \"~lib/util/utils\"\nimport { WidgetStateManager } from \"~lib/WidgetStateManager\"\n\nimport { StyledTextInput } from \"./styled-components\"\n\nexport interface Props {\n  disabled: boolean\n  element: TextInputProto\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n}\n\nfunction TextInput({\n  disabled,\n  element,\n  widgetMgr,\n  fragmentId,\n}: Props): ReactElement {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  const [uiValue, setUiValue] = useState<string | null>(\n    () => getStateFromWidgetMgr(widgetMgr, element) ?? null\n  )\n\n  const [width, elementRef] = useCalculatedWidth()\n\n  /**\n   * True if the user-specified state.value has not yet been synced to the WidgetStateManager.\n   */\n  const [dirty, setDirty] = useState(false)\n\n  const onFormCleared = useCallback(() => {\n    setUiValue(element.default ?? null)\n    setDirty(true)\n  }, [element.default])\n\n  const [value, setValueWithSource] = useBasicWidgetState<\n    string | null,\n    TextInputProto\n  >({\n    getStateFromWidgetMgr,\n    getDefaultStateFromProto,\n    getCurrStateFromProto,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n    onFormCleared,\n  })\n\n  useUpdateUiValue(value, uiValue, setUiValue, dirty)\n\n  /**\n   * Whether the input is currently focused.\n   */\n  const [focused, setFocused] = useState(false)\n\n  const theme = useEmotionTheme()\n  const [id] = useState(() => uniqueId(\"text_input_\"))\n  const { placeholder, formId, icon, maxChars } = element\n\n  const commitWidgetValue = useCallback((): void => {\n    setDirty(false)\n    setValueWithSource({ value: uiValue, fromUi: true })\n  }, [uiValue, setValueWithSource])\n\n  // Show \"Please enter\" instructions if in a form & allowed, or not in form and state is dirty.\n  const allowEnterToSubmit = isInForm({ formId })\n    ? widgetMgr.allowFormEnterToSubmit(formId)\n    : dirty\n\n  // Hide input instructions for small widget sizes.\n  const shouldShowInstructions =\n    focused && width > theme.breakpoints.hideWidgetDetails\n\n  const onBlur = useCallback((): void => {\n    if (dirty) {\n      commitWidgetValue()\n    }\n    setFocused(false)\n  }, [dirty, commitWidgetValue])\n\n  const onFocus = useCallback((): void => {\n    setFocused(true)\n  }, [])\n\n  const onChange = useOnInputChange({\n    formId,\n    maxChars,\n    setDirty,\n    setUiValue,\n    setValueWithSource,\n  })\n\n  const onKeyPress = useSubmitFormViaEnterKey(\n    formId,\n    commitWidgetValue,\n    dirty,\n    widgetMgr,\n    fragmentId\n  )\n\n  // Material icons need to be larger to render similar size of emojis,\n  // and we change their text color\n  const isMaterialIcon = icon?.startsWith(\":material\")\n  const dynamicIconSize = isMaterialIcon ? \"lg\" : \"base\"\n\n  return (\n    <StyledTextInput\n      className=\"stTextInput\"\n      data-testid=\"stTextInput\"\n      ref={elementRef}\n    >\n      <WidgetLabel\n        label={element.label}\n        disabled={disabled}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n        htmlFor={id}\n      >\n        {element.help && (\n          <StyledWidgetLabelHelp>\n            <TooltipIcon\n              content={element.help}\n              placement={Placement.TOP_RIGHT}\n            />\n          </StyledWidgetLabelHelp>\n        )}\n      </WidgetLabel>\n      <UIInput\n        value={uiValue ?? \"\"}\n        placeholder={placeholder}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onChange={onChange}\n        onKeyPress={onKeyPress}\n        aria-label={element.label}\n        disabled={disabled}\n        id={id}\n        type={getTypeString(element)}\n        autoComplete={element.autocomplete}\n        startEnhancer={\n          icon && (\n            <DynamicIcon\n              data-testid=\"stTextInputIcon\"\n              iconValue={icon}\n              size={dynamicIconSize}\n            />\n          )\n        }\n        overrides={{\n          Input: {\n            style: {\n              fontWeight: theme.fontWeights.normal,\n              // Issue: https://github.com/streamlit/streamlit/issues/2495\n              // The input won't shrink in Firefox,\n              // unless the line below is provided.\n              // See https://stackoverflow.com/a/33811151\n              minWidth: 0,\n              lineHeight: theme.lineHeights.inputWidget,\n              // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n              paddingRight: theme.spacing.sm,\n              paddingLeft: theme.spacing.md,\n              paddingBottom: theme.spacing.sm,\n              paddingTop: theme.spacing.sm,\n              \"::placeholder\": {\n                color: theme.colors.fadedText60,\n              },\n            },\n          },\n          Root: {\n            props: {\n              \"data-testid\": \"stTextInputRootElement\",\n            },\n            style: {\n              height: theme.sizes.minElementHeight,\n              // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n              borderLeftWidth: theme.sizes.borderWidth,\n              borderRightWidth: theme.sizes.borderWidth,\n              borderTopWidth: theme.sizes.borderWidth,\n              borderBottomWidth: theme.sizes.borderWidth,\n              paddingLeft: icon ? theme.spacing.sm : 0,\n            },\n          },\n          StartEnhancer: {\n            style: {\n              paddingLeft: 0,\n              paddingRight: 0,\n              // Keeps emoji icons from being cut off on the right\n              minWidth: theme.iconSizes.lg,\n              // Material icons color changed as inactionable\n              color: isMaterialIcon ? theme.colors.fadedText60 : \"inherit\",\n            },\n          },\n        }}\n      />\n      {shouldShowInstructions && (\n        <InputInstructions\n          dirty={dirty}\n          value={uiValue ?? \"\"}\n          maxLength={maxChars}\n          inForm={isInForm({ formId })}\n          allowEnterToSubmit={allowEnterToSubmit}\n        />\n      )}\n    </StyledTextInput>\n  )\n}\n\nfunction getStateFromWidgetMgr(\n  widgetMgr: WidgetStateManager,\n  element: TextInputProto\n): string | null {\n  return widgetMgr.getStringValue(element) ?? null\n}\n\nfunction getDefaultStateFromProto(element: TextInputProto): string | null {\n  return element.default ?? null\n}\n\nfunction getCurrStateFromProto(element: TextInputProto): string | null {\n  return element.value ?? null\n}\n\nfunction updateWidgetMgrState(\n  element: TextInputProto,\n  widgetMgr: WidgetStateManager,\n  vws: ValueWithSource<string | null>,\n  fragmentId?: string\n): void {\n  widgetMgr.setStringValue(\n    element,\n    vws.value,\n    { fromUi: vws.fromUi },\n    fragmentId\n  )\n}\n\nfunction getTypeString(element: TextInputProto): string {\n  return element.type === TextInputProto.Type.PASSWORD ? \"password\" : \"text\"\n}\n\nexport default memo(TextInput)\n"],"names":["StyledTextInput","_styled","target","name","styles","TextInput","disabled","element","widgetMgr","fragmentId","uiValue","setUiValue","useState","getStateFromWidgetMgr","width","elementRef","useCalculatedWidth","dirty","setDirty","onFormCleared","useCallback","default","value","setValueWithSource","useBasicWidgetState","getDefaultStateFromProto","getCurrStateFromProto","updateWidgetMgrState","useUpdateUiValue","focused","setFocused","theme","useEmotionTheme","id","uniqueId","placeholder","formId","icon","maxChars","commitWidgetValue","fromUi","allowEnterToSubmit","isInForm","allowFormEnterToSubmit","shouldShowInstructions","breakpoints","hideWidgetDetails","onBlur","onFocus","onChange","useOnInputChange","onKeyPress","useSubmitFormViaEnterKey","isMaterialIcon","startsWith","dynamicIconSize","jsx","WidgetLabel","label","labelVisibilityProtoValueToEnum","labelVisibility","help","StyledWidgetLabelHelp","TooltipIcon","Placement","TOP_RIGHT","UIInput","getTypeString","autocomplete","DynamicIcon","Input","style","fontWeight","fontWeights","normal","minWidth","lineHeight","lineHeights","inputWidget","paddingRight","spacing","sm","paddingLeft","md","paddingBottom","paddingTop","color","colors","fadedText60","Root","props","height","sizes","minElementHeight","borderLeftWidth","borderWidth","borderRightWidth","borderTopWidth","borderBottomWidth","StartEnhancer","iconSizes","lg","InputInstructions","getStringValue","vws","setStringValue","type","TextInputProto","Type","PASSWORD","TextInput$1","memo"],"mappings":";;;;;;AAkBO,MAAMA,IAAeC,gBAAAA,SAAA;AAAA,EAAAC,QAAA;AAAA,CAAA,EAAA;AAAA,EAAAC,MAAA;AAAA,EAAAC,QAAA;AAAA,CAAA;ACkC5B,SAASC,EAAU;AAAA,EACjBC,UAAAA;AAAAA,EACAC,SAAAA;AAAAA,EACAC,WAAAA;AAAAA,EACAC,YAAAA;AACK,GAAiB;AAKtB,QAAM,CAACC,GAASC,CAAU,IAAIC,EAAAA,SAC5B,MAAMC,EAAsBL,GAAWD,CAAO,KAAK,IACrD,GAEM,CAACO,GAAOC,CAAU,IAAIC,EAAAA,GAKtB,CAACC,GAAOC,CAAQ,IAAIN,EAAAA,SAAS,EAAK,GAElCO,IAAgBC,EAAAA,YAAY,MAAM;AACtCT,IAAAA,EAAWJ,EAAQc,WAAW,IAAI,GAClCH,EAAS,EAAI;AAAA,EACf,GAAG,CAACX,EAAQc,OAAO,CAAC,GAEd,CAACC,GAAOC,CAAkB,IAAIC,EAGlC;AAAA,IACAX,uBAAAA;AAAAA,IACAY,0BAAAA;AAAAA,IACAC,uBAAAA;AAAAA,IACAC,sBAAAA;AAAAA,IACApB,SAAAA;AAAAA,IACAC,WAAAA;AAAAA,IACAC,YAAAA;AAAAA,IACAU,eAAAA;AAAAA,EAAAA,CACD;AAEDS,EAAAA,EAAiBN,GAAOZ,GAASC,GAAYM,CAAK;AAKlD,QAAM,CAACY,GAASC,CAAU,IAAIlB,EAAAA,SAAS,EAAK,GAEtCmB,IAAQC,EAAAA,GACR,CAACC,CAAE,IAAIrB,EAAAA,SAAS,MAAMsB,EAAS,aAAa,CAAC,GAC7C;AAAA,IAAEC,aAAAA;AAAAA,IAAaC,QAAAA;AAAAA,IAAQC,MAAAA;AAAAA,IAAMC,UAAAA;AAAAA,EAAAA,IAAa/B,GAE1CgC,IAAoBnB,EAAAA,YAAY,MAAY;AAChDF,IAAAA,EAAS,EAAK,GACdK,EAAmB;AAAA,MAAED,OAAOZ;AAAAA,MAAS8B,QAAQ;AAAA,IAAA,CAAM;AAAA,EACrD,GAAG,CAAC9B,GAASa,CAAkB,CAAC,GAG1BkB,IAAqBC,EAAS;AAAA,IAAEN,QAAAA;AAAAA,EAAAA,CAAQ,IAC1C5B,EAAUmC,uBAAuBP,CAAM,IACvCnB,GAGE2B,IACJf,KAAWf,IAAQiB,EAAMc,YAAYC,mBAEjCC,IAAS3B,EAAAA,YAAY,MAAY;AACrC,IAAIH,KACFsB,EAAAA,GAEFT,EAAW,EAAK;AAAA,EAClB,GAAG,CAACb,GAAOsB,CAAiB,CAAC,GAEvBS,IAAU5B,EAAAA,YAAY,MAAY;AACtCU,IAAAA,EAAW,EAAI;AAAA,EACjB,GAAG,CAAA,CAAE,GAECmB,IAAWC,EAAiB;AAAA,IAChCd,QAAAA;AAAAA,IACAE,UAAAA;AAAAA,IACApB,UAAAA;AAAAA,IACAP,YAAAA;AAAAA,IACAY,oBAAAA;AAAAA,EAAAA,CACD,GAEK4B,IAAaC,EACjBhB,GACAG,GACAtB,GACAT,GACAC,CACF,GAIM4C,IAAiBhB,GAAMiB,WAAW,WAAW,GAC7CC,IAAkBF,IAAiB,OAAO;AAEhD,gCACGrD,GAAA,EACC,WAAU,eACV,eAAY,eACZ,KAAKe,GAEL,UAAA;AAAA,IAAAyC,gBAAAA,EAAAA,IAACC,GAAA,EACC,OAAOlD,EAAQmD,OACf,UAAApD,GACA,iBAAiBqD,EACfpD,EAAQqD,iBAAiBtC,KAC3B,GACA,SAASW,GAER1B,YAAQsD,QACPL,gBAAAA,EAAAA,IAACM,GAAA,EACC,UAAAN,gBAAAA,EAAAA,IAACO,GAAA,EACC,SAASxD,EAAQsD,MACjB,WAAWG,EAAUC,UAAAA,CAAU,EAAA,CAEnC,GAEJ;AAAA,IACAT,gBAAAA,EAAAA,IAACU,GAAA,EACC,OAAOxD,KAAW,IAClB,aAAAyB,GACA,QAAAY,GACA,SAAAC,GACA,UAAAC,GACA,YAAAE,GACA,cAAY5C,EAAQmD,OACpB,UAAApD,GACA,IAAA2B,GACA,MAAMkC,GAAc5D,CAAO,GAC3B,cAAcA,EAAQ6D,cACtB,eACE/B,KACEmB,gBAAAA,EAAAA,IAACa,GAAA,EACC,eAAY,mBACZ,WAAWhC,GACX,MAAMkB,EAAAA,IAIZ,WAAW;AAAA,MACTe,OAAO;AAAA,QACLC,OAAO;AAAA,UACLC,YAAYzC,EAAM0C,YAAYC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,UAK9BC,UAAU;AAAA,UACVC,YAAY7C,EAAM8C,YAAYC;AAAAA;AAAAA,UAE9BC,cAAchD,EAAMiD,QAAQC;AAAAA,UAC5BC,aAAanD,EAAMiD,QAAQG;AAAAA,UAC3BC,eAAerD,EAAMiD,QAAQC;AAAAA,UAC7BI,YAAYtD,EAAMiD,QAAQC;AAAAA,UAC1B,iBAAiB;AAAA,YACfK,OAAOvD,EAAMwD,OAAOC;AAAAA,UAAAA;AAAAA,QACtB;AAAA,MACF;AAAA,MAEFC,MAAM;AAAA,QACJC,OAAO;AAAA,UACL,eAAe;AAAA,QAAA;AAAA,QAEjBnB,OAAO;AAAA,UACLoB,QAAQ5D,EAAM6D,MAAMC;AAAAA;AAAAA,UAEpBC,iBAAiB/D,EAAM6D,MAAMG;AAAAA,UAC7BC,kBAAkBjE,EAAM6D,MAAMG;AAAAA,UAC9BE,gBAAgBlE,EAAM6D,MAAMG;AAAAA,UAC5BG,mBAAmBnE,EAAM6D,MAAMG;AAAAA,UAC/Bb,aAAa7C,IAAON,EAAMiD,QAAQC,KAAK;AAAA,QAAA;AAAA,MACzC;AAAA,MAEFkB,eAAe;AAAA,QACb5B,OAAO;AAAA,UACLW,aAAa;AAAA,UACbH,cAAc;AAAA;AAAA,UAEdJ,UAAU5C,EAAMqE,UAAUC;AAAAA;AAAAA,UAE1Bf,OAAOjC,IAAiBtB,EAAMwD,OAAOC,cAAc;AAAA,QAAA;AAAA,MACrD;AAAA,IACF,GACA;AAAA,IAEH5C,KACCY,gBAAAA,EAAAA,IAAC8C,GAAA,EACC,OAAArF,GACA,OAAOP,KAAW,IAClB,WAAW4B,GACX,QAAQI,EAAS;AAAA,MAAEN,QAAAA;AAAAA,IAAAA,CAAQ,GAC3B,oBAAAK,EAAA,CAAuC;AAAA,EAAA,GAG7C;AAEJ;AAEA,SAAS5B,EACPL,GACAD,GACe;AACf,SAAOC,EAAU+F,eAAehG,CAAO,KAAK;AAC9C;AAEA,SAASkB,EAAyBlB,GAAwC;AACxE,SAAOA,EAAQc,WAAW;AAC5B;AAEA,SAASK,GAAsBnB,GAAwC;AACrE,SAAOA,EAAQe,SAAS;AAC1B;AAEA,SAASK,GACPpB,GACAC,GACAgG,GACA/F,GACM;AACND,EAAAA,EAAUiG,eACRlG,GACAiG,EAAIlF,OACJ;AAAA,IAAEkB,QAAQgE,EAAIhE;AAAAA,EAAAA,GACd/B,CACF;AACF;AAEA,SAAS0D,GAAc5D,GAAiC;AACtD,SAAOA,EAAQmG,SAASC,EAAeC,KAAKC,WAAW,aAAa;AACtE;AAEA,MAAAC,KAAeC,EAAAA,KAAK1G,CAAS;"}