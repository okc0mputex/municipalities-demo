{"version":3,"file":"index-D-xGMBBx.js","sources":["../../../node_modules/@emotion-icons/open-iconic/Minus/Minus.esm.js","../../../node_modules/@emotion-icons/open-iconic/Plus/Plus.esm.js","../../../streamlit/frontend/lib/src/components/widgets/NumberInput/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/NumberInput/utils.ts","../../../streamlit/frontend/lib/src/components/widgets/NumberInput/NumberInput.tsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { EmotionIconBase } from '@emotion-icons/emotion-icon';\nexport var Minus = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(EmotionIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 8 8\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 3v2h8V3H0z\"\n  }));\n});\nMinus.displayName = 'Minus';\nexport var MinusDimensions = {\n  height: 8,\n  width: 8\n};","import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { EmotionIconBase } from '@emotion-icons/emotion-icon';\nexport var Plus = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(EmotionIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 8 8\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3 0v3H0v2h3v3h2V5h3V3H5V0H3z\"\n  }));\n});\nPlus.displayName = 'Plus';\nexport var PlusDimensions = {\n  height: 8,\n  width: 8\n};","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledInputContainer = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"nowrap\",\n  alignItems: \"center\",\n  height: theme.sizes.minElementHeight,\n  // Mimic the baseweb's borders here, so we can apply the focus style\n  // to the entire container and not only the input itself\n  borderWidth: theme.sizes.borderWidth,\n  borderStyle: \"solid\",\n  borderColor: theme.colors.widgetBorderColor ?? theme.colors.secondaryBg,\n  transitionDuration: \"200ms\",\n  transitionProperty: \"border\",\n  transitionTimingFunction: \"cubic-bezier(0.2, 0.8, 0.4, 1)\",\n  borderRadius: theme.radii.default,\n  overflow: \"hidden\", // Fix rounded corner being overlaid with corner of internal input.\n\n  \"&.focused\": {\n    borderColor: theme.colors.primary,\n  },\n\n  input: {\n    MozAppearance: \"textfield\",\n    \"&::-webkit-inner-spin-button, &::-webkit-outer-spin-button\": {\n      WebkitAppearance: \"none\",\n      margin: theme.spacing.none,\n    },\n  },\n}))\n\nexport const StyledInputControls = styled.div({\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignSelf: \"stretch\",\n})\n\nexport const StyledInputControl = styled.button(({ theme }) => ({\n  margin: theme.spacing.none,\n  border: \"none\",\n  height: theme.sizes.full,\n  display: \"flex\",\n  alignItems: \"center\",\n  width: theme.sizes.numberInputControlsWidth,\n  justifyContent: \"center\",\n  color: theme.colors.bodyText,\n  transition: \"color 300ms, backgroundColor 300ms\",\n  backgroundColor: theme.colors.secondaryBg,\n  \"&:hover:enabled, &:focus:enabled\": {\n    color: theme.colors.white,\n    backgroundColor: theme.colors.primary,\n    transition: \"none\",\n    outline: \"none\",\n  },\n  \"&:active\": {\n    outline: \"none\",\n    border: \"none\",\n  },\n  \"&:disabled\": {\n    cursor: \"not-allowed\",\n    color: theme.colors.fadedText40,\n  },\n}))\n\nexport interface StyledInstructionsContainerProps {\n  // If widget is clearable, the instruction needs to be moved a couple\n  // pixels to the left to avoid overlapping with the clear button.\n  clearable: boolean\n}\n\nexport const StyledInstructionsContainer =\n  styled.div<StyledInstructionsContainerProps>(({ theme, clearable }) => ({\n    position: \"absolute\",\n    marginRight: theme.spacing.twoXS,\n    left: 0,\n    // The instructions should be placed after the two controls\n    // and the clear button if it's present.\n    right: `calc(${theme.sizes.numberInputControlsWidth} * 2 + ${\n      clearable ? \"1em\" : \"0em\"\n    })`,\n  }))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getLogger } from \"loglevel\"\nimport { sprintf } from \"sprintf-js\"\n\nimport { NumberInput as NumberInputProto } from \"@streamlit/protobuf\"\n\nimport { isNullOrUndefined, notNullOrUndefined } from \"~lib/util/utils\"\n\nimport { Props } from \"./NumberInput\"\n\nconst LOG = getLogger(\"NumberInput\")\n\n/**\n * Return a string property from an element. If the string is\n * null or empty, return undefined instead.\n */\nfunction getNonEmptyString(\n  value: string | null | undefined\n): string | undefined {\n  return isNullOrUndefined(value) || value === \"\" ? undefined : value\n}\n\n/**\n * Utilizes the sprintf library to format a number value\n * according to a given format string.\n */\nexport const formatValue = ({\n  value,\n  format,\n  step,\n  dataType,\n}: {\n  value: number | null\n  format?: string | null\n  step?: number\n  dataType: NumberInputProto.DataType\n}): string | null => {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  let formatString = getNonEmptyString(format)\n\n  if (isNullOrUndefined(formatString) && notNullOrUndefined(step)) {\n    const strStep = step.toString()\n    if (\n      dataType === NumberInputProto.DataType.FLOAT &&\n      step !== 0 &&\n      strStep.includes(\".\")\n    ) {\n      const decimalPlaces = strStep.split(\".\")[1].length\n      formatString = `%0.${decimalPlaces}f`\n    }\n  }\n\n  if (isNullOrUndefined(formatString)) {\n    return value.toString()\n  }\n\n  try {\n    return sprintf(formatString, value)\n  } catch (e) {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    LOG.warn(`Error in sprintf(${formatString}, ${value}): ${e}`)\n    return String(value)\n  }\n}\n\nexport const canDecrement = (\n  value: number | null,\n  step: number,\n  min: number\n): boolean => {\n  if (isNullOrUndefined(value)) {\n    return false\n  }\n  return value - step >= min\n}\n\nexport const canIncrement = (\n  value: number | null,\n  step: number,\n  max: number\n): boolean => {\n  if (isNullOrUndefined(value)) {\n    return false\n  }\n  return value + step <= max\n}\n\n/**\n * This function returns the initial value for the NumberInput widget\n * via the widget manager.\n */\nexport const getInitialValue = (\n  props: Pick<Props, \"element\" | \"widgetMgr\">\n): number | null => {\n  const isIntData = props.element.dataType === NumberInputProto.DataType.INT\n  const storedValue = isIntData\n    ? props.widgetMgr.getIntValue(props.element)\n    : props.widgetMgr.getDoubleValue(props.element)\n  return storedValue ?? props.element.default ?? null\n}\n\nexport const getStep = ({\n  step,\n  dataType,\n}: Pick<NumberInputProto, \"step\" | \"dataType\">): number => {\n  if (step) {\n    return step\n  }\n  if (dataType === NumberInputProto.DataType.INT) {\n    return 1\n  }\n  return 0.01\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  memo,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\nimport { Minus, Plus } from \"@emotion-icons/open-iconic\"\nimport { Input as UIInput } from \"baseui/input\"\nimport uniqueId from \"lodash/uniqueId\"\n\nimport { NumberInput as NumberInputProto } from \"@streamlit/protobuf\"\n\nimport Icon, { DynamicIcon } from \"~lib/components/shared/Icon\"\nimport InputInstructions from \"~lib/components/shared/InputInstructions/InputInstructions\"\nimport { Placement } from \"~lib/components/shared/Tooltip\"\nimport TooltipIcon from \"~lib/components/shared/TooltipIcon\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"~lib/components/widgets/BaseWidget\"\nimport { useFormClearHelper } from \"~lib/components/widgets/Form\"\nimport { useCalculatedWidth } from \"~lib/hooks/useCalculatedWidth\"\nimport { useEmotionTheme } from \"~lib/hooks/useEmotionTheme\"\nimport { convertRemToPx } from \"~lib/theme\"\nimport {\n  isInForm,\n  isNullOrUndefined,\n  labelVisibilityProtoValueToEnum,\n  notNullOrUndefined,\n} from \"~lib/util/utils\"\nimport { Source, WidgetStateManager } from \"~lib/WidgetStateManager\"\n\nimport {\n  StyledInputContainer,\n  StyledInputControl,\n  StyledInputControls,\n  StyledInstructionsContainer,\n} from \"./styled-components\"\nimport {\n  canDecrement,\n  canIncrement,\n  formatValue,\n  getInitialValue,\n  getStep,\n} from \"./utils\"\n\nexport interface Props {\n  disabled: boolean\n  element: NumberInputProto\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n}\n\nconst NumberInput: React.FC<Props> = ({\n  disabled,\n  element,\n  widgetMgr,\n  fragmentId,\n}: Props): ReactElement => {\n  const theme = useEmotionTheme()\n\n  const {\n    dataType: elementDataType,\n    id: elementId,\n    formId: elementFormId,\n    default: elementDefault,\n    format: elementFormat,\n    icon,\n    min,\n    max,\n  } = element\n\n  const [width, elementRef] = useCalculatedWidth()\n\n  const [step, setStep] = useState<number>(() => getStep(element))\n  const initialValue = getInitialValue({ element, widgetMgr })\n  const [dirty, setDirty] = useState(false)\n  const [value, setValue] = useState<number | null>(initialValue)\n  const [formattedValue, setFormattedValue] = useState<string | null>(() =>\n    formatValue({ value: initialValue, ...element, step })\n  )\n  const [isFocused, setIsFocused] = useState(false)\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null)\n  const id = useRef(uniqueId(\"number_input_\"))\n\n  const canDec = canDecrement(value, step, min)\n  const canInc = canIncrement(value, step, max)\n\n  const inForm = isInForm({ formId: elementFormId })\n  // Allows form submission on Enter & displays Enter instructions, or if not in form and state is dirty\n  const allowEnterToSubmit = inForm\n    ? widgetMgr.allowFormEnterToSubmit(elementFormId)\n    : dirty\n  // Hide input instructions for small widget sizes.\n  const shouldShowInstructions =\n    isFocused && width > theme.breakpoints.hideWidgetDetails\n\n  // Update the step if the props change\n  useEffect(() => {\n    setStep(getStep({ step: element.step, dataType: element.dataType }))\n  }, [element.dataType, element.step])\n\n  const commitValue = useCallback(\n    ({\n      value: valueArg,\n      source,\n    }: {\n      value: number | null\n      source: Source\n    }) => {\n      if (notNullOrUndefined(valueArg) && (min > valueArg || valueArg > max)) {\n        inputRef.current?.reportValidity()\n      } else {\n        const newValue = valueArg ?? elementDefault ?? null\n\n        switch (elementDataType) {\n          case NumberInputProto.DataType.INT:\n            widgetMgr.setIntValue(\n              { id: elementId, formId: elementFormId },\n              newValue,\n              source,\n              fragmentId\n            )\n            break\n          case NumberInputProto.DataType.FLOAT:\n            widgetMgr.setDoubleValue(\n              { id: elementId, formId: elementFormId },\n              newValue,\n              source,\n              fragmentId\n            )\n            break\n          default:\n            throw new Error(\"Invalid data type\")\n        }\n\n        setDirty(false)\n        setValue(newValue)\n        setFormattedValue(\n          formatValue({\n            value: newValue,\n            dataType: elementDataType,\n            format: elementFormat,\n            step,\n          })\n        )\n      }\n    },\n    [\n      min,\n      max,\n      inputRef,\n      widgetMgr,\n      fragmentId,\n      step,\n      elementDataType,\n      elementId,\n      elementFormId,\n      elementDefault,\n      elementFormat,\n    ]\n  )\n\n  const onBlur = useCallback((): void => {\n    if (dirty) {\n      commitValue({ value, source: { fromUi: true } })\n    }\n    setIsFocused(false)\n  }, [dirty, value, commitValue])\n\n  const onFocus = useCallback((): void => {\n    setIsFocused(true)\n  }, [])\n\n  const updateFromProtobuf = useCallback((): void => {\n    const { value: elementValue } = element\n    element.setValue = false\n    setValue(elementValue ?? null)\n    setFormattedValue(\n      formatValue({ value: elementValue ?? null, ...element, step })\n    )\n    commitValue({ value: elementValue ?? null, source: { fromUi: false } })\n  }, [element, step, commitValue])\n\n  // on component mount, we want to update the value from protobuf if setValue is true, otherwise commit current value\n  useEffect(() => {\n    if (element.setValue) {\n      updateFromProtobuf()\n    } else {\n      commitValue({ value, source: { fromUi: false } })\n    }\n\n    const numberInput = inputRef.current\n    if (numberInput) {\n      const preventScroll: EventListener = (e): void => {\n        e.preventDefault()\n      }\n\n      // Issue #8867: Disable wheel events on the input to avoid accidental changes\n      // caused by scrolling.\n      numberInput.addEventListener(\"wheel\", preventScroll)\n\n      return () => {\n        numberInput.removeEventListener(\"wheel\", preventScroll)\n      }\n    }\n\n    // I don't want to run this effect on every render, only on mount.\n    // Additionally, it's okay if commitValue changes, because we only call\n    // it once in the beginning anyways.\n    // TODO: Update to match React best practices\n    // eslint-disable-next-line react-hooks/react-compiler\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [])\n\n  // update from protobuf whenever component updates if element.setValue is truthy\n  if (element.setValue) {\n    updateFromProtobuf()\n  }\n\n  const clearable = isNullOrUndefined(element.default) && !disabled\n\n  const onFormCleared = useCallback(() => {\n    const newValue = element.default ?? null\n    setValue(newValue)\n    commitValue({ value: newValue, source: { fromUi: true } })\n  }, [element])\n\n  useFormClearHelper({\n    element,\n    widgetMgr,\n    onFormCleared,\n  })\n\n  const onChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void => {\n    const { value: targetValue } = e.target\n\n    if (targetValue === \"\") {\n      setDirty(true)\n      setValue(null)\n      setFormattedValue(null)\n    } else {\n      let numValue: number\n\n      if (element.dataType === NumberInputProto.DataType.INT) {\n        numValue = parseInt(targetValue, 10)\n      } else {\n        numValue = parseFloat(targetValue)\n      }\n\n      setDirty(true)\n      setValue(numValue)\n      setFormattedValue(targetValue)\n    }\n  }\n\n  const increment = useCallback(() => {\n    if (canInc) {\n      setDirty(true)\n      commitValue({ value: (value ?? min) + step, source: { fromUi: true } })\n    }\n  }, [value, min, step, canInc])\n\n  const decrement = useCallback(() => {\n    if (canDec) {\n      setDirty(true)\n      commitValue({ value: (value ?? max) - step, source: { fromUi: true } })\n    }\n  }, [value, max, step, canDec])\n\n  const onKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n      const { key } = e\n\n      switch (key) {\n        case \"ArrowUp\":\n          e.preventDefault()\n          increment()\n          break\n        case \"ArrowDown\":\n          e.preventDefault()\n          decrement()\n          break\n        default:\n      }\n    },\n    [increment, decrement]\n  )\n\n  const onKeyPress = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n      if (e.key === \"Enter\") {\n        if (dirty) {\n          commitValue({ value, source: { fromUi: true } })\n        }\n        if (widgetMgr.allowFormEnterToSubmit(elementFormId)) {\n          widgetMgr.submitForm(elementFormId, fragmentId)\n        }\n      }\n    },\n    [dirty, value, commitValue, widgetMgr, elementFormId, fragmentId]\n  )\n\n  // Material icons need to be larger to render similar size of emojis,\n  // and we change their text color\n  const isMaterialIcon = icon?.startsWith(\":material\")\n  const dynamicIconSize = isMaterialIcon ? \"lg\" : \"base\"\n\n  // Adjust breakpoint for icon so the total width of the input element\n  // is same when input controls hidden\n  const iconAdjustment =\n    // Account for icon size + its left/right padding\n    convertRemToPx(theme.iconSizes.lg) +\n    2 * convertRemToPx(theme.spacing.twoXS)\n  const numberInputControlBreakpoint = icon\n    ? theme.breakpoints.hideNumberInputControls + iconAdjustment\n    : theme.breakpoints.hideNumberInputControls\n\n  return (\n    <div\n      className=\"stNumberInput\"\n      data-testid=\"stNumberInput\"\n      ref={elementRef}\n    >\n      <WidgetLabel\n        label={element.label}\n        disabled={disabled}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n        htmlFor={id.current}\n      >\n        {element.help && (\n          <StyledWidgetLabelHelp>\n            <TooltipIcon\n              content={element.help}\n              placement={Placement.TOP_RIGHT}\n            />\n          </StyledWidgetLabelHelp>\n        )}\n      </WidgetLabel>\n      <StyledInputContainer\n        className={isFocused ? \"focused\" : \"\"}\n        data-testid=\"stNumberInputContainer\"\n      >\n        <UIInput\n          type=\"number\"\n          inputRef={inputRef}\n          value={formattedValue ?? \"\"}\n          placeholder={element.placeholder}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          onChange={onChange}\n          onKeyPress={onKeyPress}\n          onKeyDown={onKeyDown}\n          clearable={clearable}\n          clearOnEscape={clearable}\n          disabled={disabled}\n          aria-label={element.label}\n          startEnhancer={\n            element.icon && (\n              <DynamicIcon\n                data-testid=\"stNumberInputIcon\"\n                iconValue={element.icon}\n                size={dynamicIconSize}\n              />\n            )\n          }\n          id={id.current}\n          overrides={{\n            ClearIconContainer: {\n              style: {\n                padding: 0,\n              },\n            },\n            ClearIcon: {\n              props: {\n                overrides: {\n                  Svg: {\n                    style: {\n                      color: theme.colors.darkGray,\n                      // setting this width and height makes the clear-icon align with dropdown arrows of other input fields\n                      padding: theme.spacing.threeXS,\n                      height: theme.sizes.clearIconSize,\n                      width: theme.sizes.clearIconSize,\n                      \":hover\": {\n                        fill: theme.colors.bodyText,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n            Input: {\n              props: {\n                \"data-testid\": \"stNumberInputField\",\n                step: step,\n                min: min,\n                max: max,\n                // We specify the type as \"number\" to have numeric keyboard on mobile devices.\n                // We also set inputMode to \"\" since by default BaseWeb sets \"text\",\n                // and for \"decimal\" / \"numeric\" IOS shows keyboard without a minus sign.\n                type: \"number\",\n                inputMode: \"\",\n              },\n              style: {\n                fontWeight: theme.fontWeights.normal,\n                lineHeight: theme.lineHeights.inputWidget,\n                // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                paddingRight: theme.spacing.sm,\n                paddingLeft: theme.spacing.md,\n                paddingBottom: theme.spacing.sm,\n                paddingTop: theme.spacing.sm,\n                \"::placeholder\": {\n                  color: theme.colors.fadedText60,\n                },\n              },\n            },\n            InputContainer: {\n              style: () => ({\n                borderTopRightRadius: 0,\n                borderBottomRightRadius: 0,\n              }),\n            },\n            Root: {\n              style: {\n                // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                borderTopRightRadius: 0,\n                borderBottomRightRadius: 0,\n                borderTopLeftRadius: 0,\n                borderBottomLeftRadius: 0,\n                borderLeftWidth: 0,\n                borderRightWidth: 0,\n                borderTopWidth: 0,\n                borderBottomWidth: 0,\n                paddingRight: 0,\n                paddingLeft: icon ? theme.spacing.sm : 0,\n              },\n            },\n            StartEnhancer: {\n              style: {\n                paddingLeft: 0,\n                paddingRight: 0,\n                // Keeps emoji icons from being cut off on the right\n                minWidth: theme.iconSizes.lg,\n                // Material icons color changed as inactionable\n                color: isMaterialIcon ? theme.colors.fadedText60 : \"inherit\",\n              },\n            },\n          }}\n        />\n        {/* We only want to show the increment/decrement controls when there is sufficient room to display the value and these controls. */}\n        {width > numberInputControlBreakpoint && (\n          <StyledInputControls>\n            <StyledInputControl\n              data-testid=\"stNumberInputStepDown\"\n              onClick={decrement}\n              disabled={!canDec || disabled}\n              tabIndex={-1}\n            >\n              <Icon\n                content={Minus}\n                size=\"xs\"\n                color={canDec ? \"inherit\" : theme.colors.disabled}\n              />\n            </StyledInputControl>\n            <StyledInputControl\n              data-testid=\"stNumberInputStepUp\"\n              onClick={increment}\n              disabled={!canInc || disabled}\n              tabIndex={-1}\n            >\n              <Icon\n                content={Plus}\n                size=\"xs\"\n                color={canInc ? \"inherit\" : theme.colors.disabled}\n              />\n            </StyledInputControl>\n          </StyledInputControls>\n        )}\n      </StyledInputContainer>\n      {shouldShowInstructions && (\n        <StyledInstructionsContainer clearable={clearable}>\n          <InputInstructions\n            dirty={dirty}\n            value={formattedValue ?? \"\"}\n            inForm={inForm}\n            allowEnterToSubmit={allowEnterToSubmit}\n          />\n        </StyledInstructionsContainer>\n      )}\n    </div>\n  )\n}\n\nexport default memo(NumberInput)\n"],"names":["Minus","React.forwardRef","props","ref","attrs","React.createElement","EmotionIconBase","_extends","Plus","StyledInputContainer","_styled","target","theme","display","flexDirection","flexWrap","alignItems","height","sizes","minElementHeight","borderWidth","borderStyle","borderColor","colors","widgetBorderColor","secondaryBg","transitionDuration","transitionProperty","transitionTimingFunction","borderRadius","radii","default","overflow","primary","input","MozAppearance","WebkitAppearance","margin","spacing","none","StyledInputControls","name","styles","StyledInputControl","border","full","width","numberInputControlsWidth","justifyContent","color","bodyText","transition","backgroundColor","white","outline","cursor","fadedText40","StyledInstructionsContainer","clearable","position","marginRight","twoXS","left","right","LOG","getLogger","getNonEmptyString","value","isNullOrUndefined","undefined","formatValue","format","step","dataType","formatString","notNullOrUndefined","strStep","toString","NumberInputProto","DataType","FLOAT","includes","split","length","sprintf","e","warn","String","canDecrement","min","canIncrement","max","getInitialValue","element","INT","widgetMgr","getIntValue","getDoubleValue","getStep","NumberInput","disabled","fragmentId","useEmotionTheme","elementDataType","id","elementId","formId","elementFormId","elementDefault","elementFormat","icon","elementRef","useCalculatedWidth","setStep","useState","initialValue","dirty","setDirty","setValue","formattedValue","setFormattedValue","isFocused","setIsFocused","inputRef","useRef","uniqueId","canDec","canInc","inForm","isInForm","allowEnterToSubmit","allowFormEnterToSubmit","shouldShowInstructions","breakpoints","hideWidgetDetails","useEffect","commitValue","useCallback","valueArg","source","current","reportValidity","newValue","setIntValue","setDoubleValue","Error","onBlur","fromUi","onFocus","updateFromProtobuf","elementValue","numberInput","preventScroll","preventDefault","addEventListener","removeEventListener","onFormCleared","useFormClearHelper","onChange","targetValue","numValue","parseInt","parseFloat","increment","decrement","onKeyDown","key","onKeyPress","submitForm","isMaterialIcon","startsWith","dynamicIconSize","iconAdjustment","convertRemToPx","iconSizes","lg","numberInputControlBreakpoint","hideNumberInputControls","jsx","WidgetLabel","label","labelVisibilityProtoValueToEnum","labelVisibility","help","StyledWidgetLabelHelp","TooltipIcon","Placement","TOP_RIGHT","UIInput","placeholder","DynamicIcon","ClearIconContainer","style","padding","ClearIcon","overrides","Svg","darkGray","threeXS","clearIconSize","fill","Input","type","inputMode","fontWeight","fontWeights","normal","lineHeight","lineHeights","inputWidget","paddingRight","sm","paddingLeft","md","paddingBottom","paddingTop","fadedText60","InputContainer","borderTopRightRadius","borderBottomRightRadius","Root","borderTopLeftRadius","borderBottomLeftRadius","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","StartEnhancer","minWidth","jsxs","Icon","InputInstructions","NumberInput$1","memo"],"mappings":"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","x_google_ignoreList":[0,1]}