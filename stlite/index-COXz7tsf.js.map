{"version":3,"file":"index-COXz7tsf.js","sources":["../../../streamlit/frontend/lib/src/components/elements/Video/styled-components.ts","../../../streamlit/frontend/lib/src/components/elements/Video/Video.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledVideoIframe = styled.iframe(({ theme }) => ({\n  colorScheme: \"normal\",\n  border: \"none\",\n  padding: theme.spacing.none,\n  margin: theme.spacing.none,\n  width: \"100%\",\n  aspectRatio: \"16 / 9\",\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n * Copyright (c) Yuichiro Tachibana (Tsuchiya) (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { memo, ReactElement, useEffect, useMemo, useRef } from \"react\"\n\nimport { getLogger } from \"loglevel\"\n\nimport { ISubtitleTrack, Video as VideoProto } from \"@streamlit/protobuf\"\n\nimport { useCrossOriginAttribute } from \"~lib/hooks/useCrossOriginAttribute\"\nimport { StreamlitEndpoints } from \"~lib/StreamlitEndpoints\"\nimport { WidgetStateManager as ElementStateManager } from \"~lib/WidgetStateManager\"\n\nimport { useStliteMediaObjectUrl, useStliteMediaObjects } from \"@stlite/kernel\"\n\nimport { StyledVideoIframe } from \"./styled-components\"\n\nconst LOG = getLogger(\"Video\")\nexport interface VideoProps {\n  endpoints: StreamlitEndpoints\n  element: VideoProto\n  elementMgr: ElementStateManager\n}\n\nexport interface Subtitle {\n  label: string\n  url: string\n}\n\nconst VIDEO_STYLE = { width: \"100%\" }\n\nfunction Video({\n  element,\n  endpoints,\n  elementMgr,\n}: Readonly<VideoProps>): ReactElement {\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  /* Element may contain \"url\" or \"data\" property. */\n  const {\n    type,\n    url: rawUrl,\n    startTime,\n    subtitles: rawSubtitles,\n    endTime,\n    loop,\n    autoplay,\n    muted,\n  } = element\n  const url = useStliteMediaObjectUrl(rawUrl)\n  const subtitles = useStliteMediaObjects(rawSubtitles)\n\n  let crossOrigin = useCrossOriginAttribute(url)\n\n  const preventAutoplay = useMemo<boolean>(() => {\n    if (!element.id) {\n      // Elements without an ID should never autoplay\n      return true\n    }\n\n    // Recover the state in case this component got unmounted\n    // and mounted again for the same element.\n    const preventAutoplayState = elementMgr.getElementState(\n      element.id,\n      \"preventAutoplay\"\n    )\n\n    if (!preventAutoplayState) {\n      // Set the state to prevent autoplay in case there is an unmount + mount\n      // for the same element.\n      elementMgr.setElementState(element.id, \"preventAutoplay\", true)\n    }\n    return preventAutoplayState ?? false\n  }, [element.id, elementMgr])\n\n  // Create a stable dependency for checking subtitle source urls\n  const subtitleSrcArrString = useMemo(() => {\n    if (!subtitles) {\n      return JSON.stringify([])\n    }\n\n    return JSON.stringify(\n      subtitles.map(subtitle => endpoints.buildMediaURL(`${subtitle.url}`))\n    )\n  }, [subtitles, endpoints])\n\n  // Check the video's subtitles for load errors\n  useEffect(() => {\n    const subtitleSrcArr: string[] = JSON.parse(subtitleSrcArrString)\n    if (subtitleSrcArr.length === 0) return\n\n    // Since there is no onerror event for track elements, we can't use the onerror event\n    // to catch src url load errors. Catch with direct check instead.\n    subtitleSrcArr.forEach(subtitleSrc => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises -- TODO: Fix this\n      endpoints.checkSourceUrlResponse(subtitleSrc, \"Video Subtitle\")\n    })\n  }, [subtitleSrcArrString, endpoints])\n\n  // Handle startTime changes\n  useEffect(() => {\n    if (videoRef.current) {\n      videoRef.current.currentTime = startTime\n    }\n  }, [startTime])\n\n  useEffect(() => {\n    const videoNode = videoRef.current\n\n    const setStartTime: () => void = () => {\n      if (videoNode) {\n        videoNode.currentTime = element.startTime\n      }\n    }\n\n    if (videoNode) {\n      videoNode.addEventListener(\"loadedmetadata\", setStartTime)\n    }\n\n    return () => {\n      if (videoNode) {\n        videoNode.removeEventListener(\"loadedmetadata\", setStartTime)\n      }\n    }\n  }, [element])\n\n  // Stop the video at 'endTime' and handle loop\n  useEffect(() => {\n    const videoNode = videoRef.current\n    if (!videoNode) {\n      return\n    }\n\n    // Flag to avoid calling 'videoNode.pause()' multiple times\n    let stoppedByEndTime = false\n\n    const handleTimeUpdate = (): void => {\n      if (endTime > 0 && videoNode.currentTime >= endTime) {\n        if (loop) {\n          // If loop is true and we reached 'endTime', reset to 'startTime'\n          videoNode.currentTime = startTime || 0\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises -- TODO: Fix this\n          videoNode.play()\n        } else if (!stoppedByEndTime) {\n          stoppedByEndTime = true\n          videoNode.pause()\n        }\n      }\n    }\n\n    if (endTime > 0) {\n      videoNode.addEventListener(\"timeupdate\", handleTimeUpdate)\n    }\n\n    return () => {\n      if (videoNode && endTime > 0) {\n        videoNode.removeEventListener(\"timeupdate\", handleTimeUpdate)\n      }\n    }\n  }, [endTime, loop, startTime])\n\n  // Handle looping the video\n  useEffect(() => {\n    const videoNode = videoRef.current\n    if (!videoNode) {\n      return\n    }\n\n    // Loop the video when it has ended\n    const handleVideoEnd = (): void => {\n      if (loop) {\n        videoNode.currentTime = startTime || 0 // Reset to startTime or to the start if not specified\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises -- TODO: Fix this\n        videoNode.play()\n      }\n    }\n\n    videoNode.addEventListener(\"ended\", handleVideoEnd)\n\n    return () => {\n      if (videoNode) {\n        videoNode.removeEventListener(\"ended\", handleVideoEnd)\n      }\n    }\n  }, [loop, startTime])\n\n  const getYoutubeSrc = (urlArg: string): string => {\n    const youtubeUrl = new URL(urlArg)\n\n    if (startTime && !isNaN(startTime)) {\n      youtubeUrl.searchParams.append(\"start\", startTime.toString())\n    }\n\n    if (endTime && !isNaN(endTime)) {\n      youtubeUrl.searchParams.append(\"end\", endTime.toString())\n    }\n\n    if (loop) {\n      youtubeUrl.searchParams.append(\"loop\", \"1\")\n      // When using the loop parameter, YouTube requires the playlist parameter to be set to the same video ID\n      const videoId = youtubeUrl.pathname.split(\"/\").pop()\n\n      if (videoId) {\n        youtubeUrl.searchParams.append(\"playlist\", videoId)\n      }\n    }\n\n    if (autoplay) {\n      youtubeUrl.searchParams.append(\"autoplay\", \"1\")\n    }\n\n    if (muted) {\n      youtubeUrl.searchParams.append(\"mute\", \"1\")\n    }\n\n    return youtubeUrl.toString()\n  }\n\n  // Is this a YouTube link? If so we need a fancier tag.\n  // NOTE: This part assumes the URL is already an \"embed\" link.\n  if (type === VideoProto.Type.YOUTUBE_IFRAME) {\n    return (\n      <StyledVideoIframe\n        className=\"stVideo\"\n        data-testid=\"stVideo\"\n        title={url}\n        src={getYoutubeSrc(url)}\n        allow=\"autoplay; encrypted-media\"\n        allowFullScreen\n      />\n    )\n  }\n\n  const handleVideoError = (\n    e: React.SyntheticEvent<HTMLVideoElement>\n  ): void => {\n    const videoUrl = e.currentTarget.src\n    LOG.error(`Client Error: Video source error - ${videoUrl}`)\n    endpoints.sendClientErrorToHost(\n      \"Video\",\n      \"Video source failed to load\",\n      \"onerror triggered\",\n      videoUrl\n    )\n  }\n\n  // When in dev mode we set crossOrigin to \"anonymous\" to avoid CORS issues\n  // when streamlit frontend and backend are running on different ports\n  if (process.env.NODE_ENV === \"development\" && subtitles.length > 0) {\n    crossOrigin = \"anonymous\"\n  }\n\n  return (\n    // eslint-disable-next-line jsx-a11y/media-has-caption\n    <video\n      className=\"stVideo\"\n      data-testid=\"stVideo\"\n      ref={videoRef}\n      controls\n      muted={muted}\n      autoPlay={autoplay && !preventAutoplay}\n      src={endpoints.buildMediaURL(url)}\n      style={VIDEO_STYLE}\n      crossOrigin={crossOrigin}\n      onError={handleVideoError}\n    >\n      {subtitles &&\n        subtitles.map((subtitle: ISubtitleTrack, idx: number) => (\n          <track\n            // TODO: Update to match React best practices\n            // eslint-disable-next-line @eslint-react/no-array-index-key\n            key={idx}\n            kind=\"captions\"\n            src={endpoints.buildMediaURL(`${subtitle.url}`)}\n            label={`${subtitle.label}`}\n            default={idx === 0}\n            data-testid=\"stVideoSubtitle\"\n          />\n        ))}\n    </video>\n  )\n}\n\nexport default memo(Video)\n"],"names":["StyledVideoIframe","_styled","target","theme","colorScheme","border","padding","spacing","none","margin","width","aspectRatio","LOG","getLogger","VIDEO_STYLE","Video","element","endpoints","elementMgr","videoRef","useRef","type","url","rawUrl","startTime","subtitles","rawSubtitles","endTime","loop","autoplay","muted","useStliteMediaObjectUrl","useStliteMediaObjects","crossOrigin","useCrossOriginAttribute","preventAutoplay","useMemo","id","preventAutoplayState","getElementState","setElementState","subtitleSrcArrString","JSON","stringify","map","subtitle","buildMediaURL","useEffect","subtitleSrcArr","parse","length","forEach","subtitleSrc","checkSourceUrlResponse","current","currentTime","videoNode","setStartTime","addEventListener","removeEventListener","stoppedByEndTime","handleTimeUpdate","play","pause","handleVideoEnd","getYoutubeSrc","urlArg","youtubeUrl","URL","isNaN","searchParams","append","toString","videoId","pathname","split","pop","VideoProto","Type","YOUTUBE_IFRAME","handleVideoError","e","videoUrl","currentTarget","src","error","sendClientErrorToHost","jsx","idx","label","Video$1","memo"],"mappings":"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"}