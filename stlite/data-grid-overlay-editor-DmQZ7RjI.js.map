{"version":3,"file":"data-grid-overlay-editor-DmQZ7RjI.js","sources":["../../../node_modules/@glideapps/glide-data-grid/dist/esm/internal/data-grid-overlay-editor/data-grid-overlay-editor-style.js","../../../node_modules/@glideapps/glide-data-grid/dist/esm/internal/data-grid-overlay-editor/use-stay-on-screen.js","../../../node_modules/@glideapps/glide-data-grid/dist/esm/internal/data-grid-overlay-editor/data-grid-overlay-editor.js"],"sourcesContent":["import { styled } from \"@linaria/react\";\nconst _exp2 = /*#__PURE__*/() => p => p.targetX;\nconst _exp3 = /*#__PURE__*/() => p => p.targetY;\nconst _exp4 = /*#__PURE__*/() => p => p.targetWidth;\nconst _exp5 = /*#__PURE__*/() => p => p.targetHeight;\nconst _exp6 = /*#__PURE__*/() => p => p.targetY + 10;\nconst _exp7 = /*#__PURE__*/() => p => Math.max(0, (p.targetHeight - 28) / 2);\nexport const DataGridOverlayEditorStyle = /*#__PURE__*/styled('div')({\n  name: \"DataGridOverlayEditorStyle\",\n  class: \"gdg-d19meir1\",\n  propsAsIs: false,\n  vars: {\n    \"d19meir1-0\": [_exp3(), \"px\"],\n    \"d19meir1-1\": [_exp2(), \"px\"],\n    \"d19meir1-2\": [_exp4(), \"px\"],\n    \"d19meir1-3\": [_exp5(), \"px\"],\n    \"d19meir1-4\": [_exp6(), \"px\"],\n    \"d19meir1-5\": [_exp7(), \"px\"]\n  }\n});\n\n","import * as React from \"react\";\nfunction useRefState() {\n    const [refState, setRefState] = React.useState();\n    return [refState ?? undefined, setRefState];\n}\nexport function useStayOnScreen() {\n    const [ref, setRef] = useRefState();\n    const [xOffset, setXOffset] = React.useState(0);\n    const [isIntersecting, setIsIntersecting] = React.useState(true);\n    React.useLayoutEffect(() => {\n        if (ref === undefined)\n            return;\n        if (!(\"IntersectionObserver\" in window))\n            return;\n        const observer = new IntersectionObserver(ents => {\n            if (ents.length === 0)\n                return;\n            setIsIntersecting(ents[0].isIntersecting);\n        }, { threshold: 1 });\n        observer.observe(ref);\n        return () => observer.disconnect();\n    }, [ref]);\n    React.useEffect(() => {\n        if (isIntersecting || ref === undefined)\n            return;\n        let rafHandle;\n        const fn = () => {\n            const { right: refRight } = ref.getBoundingClientRect();\n            setXOffset(cv => Math.min(cv + window.innerWidth - refRight - 10, 0));\n            rafHandle = requestAnimationFrame(fn);\n        };\n        rafHandle = requestAnimationFrame(fn);\n        return () => {\n            if (rafHandle !== undefined) {\n                cancelAnimationFrame(rafHandle);\n            }\n        };\n    }, [ref, isIntersecting]);\n    const style = React.useMemo(() => {\n        return { transform: `translateX(${xOffset}px)` };\n    }, [xOffset]);\n    return {\n        ref: setRef,\n        style,\n    };\n}\n//# sourceMappingURL=use-stay-on-screen.js.map","import * as React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport ClickOutsideContainer from \"../click-outside-container/click-outside-container.js\";\nimport { makeCSSStyle, ThemeContext } from \"../../common/styles.js\";\nimport { isEditableGridCell, isInnerOnlyCell, isObjectEditorCallbackResult, } from \"../data-grid/data-grid-types.js\";\nimport { DataGridOverlayEditorStyle } from \"./data-grid-overlay-editor-style.js\";\nimport { useStayOnScreen } from \"./use-stay-on-screen.js\";\nconst DataGridOverlayEditor = p => {\n    const { target, content, onFinishEditing: onFinishEditingIn, forceEditMode, initialValue, imageEditorOverride, markdownDivCreateNode, highlight, className, theme, id, cell, bloom, portalElementRef, validateCell, getCellRenderer, provideEditor, isOutsideClick, customEventTarget, } = p;\n    const [tempValue, setTempValueRaw] = React.useState(forceEditMode ? content : undefined);\n    const lastValueRef = React.useRef(tempValue ?? content);\n    lastValueRef.current = tempValue ?? content;\n    const [isValid, setIsValid] = React.useState(() => {\n        if (validateCell === undefined)\n            return true;\n        return !(isEditableGridCell(content) && validateCell?.(cell, content, lastValueRef.current) === false);\n    });\n    const onFinishEditing = React.useCallback((newCell, movement) => {\n        onFinishEditingIn(isValid ? newCell : undefined, movement);\n    }, [isValid, onFinishEditingIn]);\n    const setTempValue = React.useCallback((newVal) => {\n        if (validateCell !== undefined && newVal !== undefined && isEditableGridCell(newVal)) {\n            const validResult = validateCell(cell, newVal, lastValueRef.current);\n            if (validResult === false) {\n                setIsValid(false);\n            }\n            else if (typeof validResult === \"object\") {\n                newVal = validResult;\n                setIsValid(true);\n            }\n            else {\n                setIsValid(true);\n            }\n        }\n        setTempValueRaw(newVal);\n    }, [cell, validateCell]);\n    const finished = React.useRef(false);\n    const customMotion = React.useRef(undefined);\n    const onClickOutside = React.useCallback(() => {\n        onFinishEditing(tempValue, [0, 0]);\n        finished.current = true;\n    }, [tempValue, onFinishEditing]);\n    const onEditorFinished = React.useCallback((newValue, movement) => {\n        onFinishEditing(newValue, movement ?? customMotion.current ?? [0, 0]);\n        finished.current = true;\n    }, [onFinishEditing]);\n    const onKeyDown = React.useCallback(async (event) => {\n        let save = false;\n        if (event.key === \"Escape\") {\n            event.stopPropagation();\n            event.preventDefault();\n            customMotion.current = [0, 0];\n        }\n        else if (event.key === \"Enter\" && !event.shiftKey) {\n            event.stopPropagation();\n            event.preventDefault();\n            customMotion.current = [0, 1];\n            save = true;\n        }\n        else if (event.key === \"Tab\") {\n            event.stopPropagation();\n            event.preventDefault();\n            customMotion.current = [event.shiftKey ? -1 : 1, 0];\n            save = true;\n        }\n        window.setTimeout(() => {\n            if (!finished.current && customMotion.current !== undefined) {\n                onFinishEditing(save ? tempValue : undefined, customMotion.current);\n                finished.current = true;\n            }\n        }, 0);\n    }, [onFinishEditing, tempValue]);\n    const targetValue = tempValue ?? content;\n    const [editorProvider, useLabel] = React.useMemo(() => {\n        if (isInnerOnlyCell(content))\n            return [];\n        const cellWithLocation = { ...content, location: cell };\n        const external = provideEditor?.(cellWithLocation);\n        if (external !== undefined)\n            return [external, false];\n        return [getCellRenderer(content)?.provideEditor?.(cellWithLocation), false];\n    }, [cell, content, getCellRenderer, provideEditor]);\n    const { ref, style: stayOnScreenStyle } = useStayOnScreen();\n    let pad = true;\n    let editor;\n    let style = true;\n    let styleOverride;\n    if (editorProvider !== undefined) {\n        pad = editorProvider.disablePadding !== true;\n        style = editorProvider.disableStyling !== true;\n        const isObjectEditor = isObjectEditorCallbackResult(editorProvider);\n        if (isObjectEditor) {\n            styleOverride = editorProvider.styleOverride;\n        }\n        const CustomEditor = isObjectEditor ? editorProvider.editor : editorProvider;\n        editor = (React.createElement(CustomEditor, { portalElementRef: portalElementRef, isHighlighted: highlight, onChange: setTempValue, value: targetValue, initialValue: initialValue, onFinishedEditing: onEditorFinished, validatedSelection: isEditableGridCell(targetValue) ? targetValue.selectionRange : undefined, forceEditMode: forceEditMode, target: target, imageEditorOverride: imageEditorOverride, markdownDivCreateNode: markdownDivCreateNode, isValid: isValid, theme: theme }));\n    }\n    styleOverride = { ...styleOverride, ...stayOnScreenStyle };\n    // Consider imperatively creating and adding the element to the dom?\n    const portalElement = portalElementRef?.current ?? document.getElementById(\"portal\");\n    if (portalElement === null) {\n        // eslint-disable-next-line no-console\n        console.error('Cannot open Data Grid overlay editor, because portal not found. Please, either provide a portalElementRef or add `<div id=\"portal\" />` as the last child of your `<body>`.');\n        return null;\n    }\n    let classWrap = style ? \"gdg-style\" : \"gdg-unstyle\";\n    if (!isValid) {\n        classWrap += \" gdg-invalid\";\n    }\n    if (pad) {\n        classWrap += \" gdg-pad\";\n    }\n    const bloomX = bloom?.[0] ?? 1;\n    const bloomY = bloom?.[1] ?? 1;\n    return createPortal(React.createElement(ThemeContext.Provider, { value: theme },\n        React.createElement(ClickOutsideContainer, { style: makeCSSStyle(theme), className: className, onClickOutside: onClickOutside, isOutsideClick: isOutsideClick, customEventTarget: customEventTarget },\n            React.createElement(DataGridOverlayEditorStyle, { ref: ref, id: id, className: classWrap, style: styleOverride, as: useLabel === true ? \"label\" : undefined, targetX: target.x - bloomX, targetY: target.y - bloomY, targetWidth: target.width + bloomX * 2, targetHeight: target.height + bloomY * 2 },\n                React.createElement(\"div\", { className: \"gdg-clip-region\", onKeyDown: onKeyDown }, editor)))), portalElement);\n};\nexport default DataGridOverlayEditor;\n//# sourceMappingURL=data-grid-overlay-editor.js.map"],"names":["_exp2","p","_exp3","_exp4","_exp5","_exp6","_exp7","DataGridOverlayEditorStyle","styled","useRefState","refState","setRefState","React.useState","useStayOnScreen","ref","setRef","xOffset","setXOffset","isIntersecting","setIsIntersecting","React.useLayoutEffect","observer","ents","React.useEffect","rafHandle","fn","refRight","cv","style","React.useMemo","DataGridOverlayEditor","target","content","onFinishEditingIn","forceEditMode","initialValue","imageEditorOverride","markdownDivCreateNode","highlight","className","theme","id","cell","bloom","portalElementRef","validateCell","getCellRenderer","provideEditor","isOutsideClick","customEventTarget","tempValue","setTempValueRaw","lastValueRef","React.useRef","isValid","setIsValid","isEditableGridCell","onFinishEditing","React.useCallback","newCell","movement","setTempValue","newVal","validResult","finished","customMotion","onClickOutside","onEditorFinished","newValue","onKeyDown","event","save","targetValue","editorProvider","useLabel","isInnerOnlyCell","cellWithLocation","external","stayOnScreenStyle","pad","editor","styleOverride","isObjectEditor","isObjectEditorCallbackResult","CustomEditor","React.createElement","portalElement","classWrap","bloomX","bloomY","createPortal","ThemeContext","ClickOutsideContainer","makeCSSStyle"],"mappings":"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","x_google_ignoreList":[0,1,2]}