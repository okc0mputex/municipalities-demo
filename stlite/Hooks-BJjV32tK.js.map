{"version":3,"file":"Hooks-BJjV32tK.js","sources":["../../../streamlit/frontend/lib/src/util/Hooks.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  MutableRefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any -- TODO: Replace 'any' with a more specific type.\nexport const usePrevious = (value: any): any => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n\n  return ref.current\n}\n\nexport const useIsOverflowing = (\n  ref: MutableRefObject<HTMLElement | null>,\n  expanded?: boolean\n): boolean => {\n  const { current } = ref\n  const [isOverflowing, setIsOverflowing] = useState(false)\n  const checkOverflowing = useCallback(() => {\n    if (current) {\n      const { scrollHeight, clientHeight } = current\n\n      setIsOverflowing(scrollHeight > clientHeight)\n    }\n  }, [current])\n\n  // We want to double check if the element is overflowing\n  // when the expanded state changes or the height of the\n  // element changes\n  useEffect(() => {\n    checkOverflowing()\n    // TODO: Update to match React best practices\n    // eslint-disable-next-line react-hooks/react-compiler\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [expanded, current?.clientHeight]) // eslint-disable-line streamlit-custom/no-force-reflow-access -- Existing usage\n\n  // Window resizing can also affect the overflow state\n  // so we need to check it as well\n  useEffect(() => {\n    window.addEventListener(\"resize\", checkOverflowing)\n\n    return () => {\n      window.removeEventListener(\"resize\", checkOverflowing)\n    }\n  }, [checkOverflowing])\n\n  return isOverflowing\n}\n"],"names":["usePrevious","value","ref","useRef","useEffect","current"],"mappings":";AAyBO,MAAMA,IAAcA,CAACC,MAAoB;AAC9C,QAAMC,IAAMC,EAAAA,OAAAA;AAEZC,SAAAA,EAAAA,UAAU,MAAM;AACdF,IAAAA,EAAIG,UAAUJ;AAAAA,EAChB,GAAG,CAACA,CAAK,CAAC,GAEHC,EAAIG;AACb;"}