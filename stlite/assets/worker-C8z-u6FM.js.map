{"version":3,"file":"worker-C8z-u6FM.js","sources":["../../../node_modules/path-browserify/index.js","../../kernel/dist/file.js","../../common/src/requirements.ts","../../kernel/dist/pyodide-loader.js","../../kernel/dist/mock.js","../../kernel/dist/module-auto-load.js","../../kernel/dist/code_completion.js","../../kernel/dist/worker-runtime.js","../../kernel/dist/app-id.js","../../kernel/dist/worker.js"],"sourcesContent":["// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","import path from \"path-browserify\";\nexport const globalHomeDir = \"/home/pyodide\";\nexport const getAppHomeDir = (appId) => `${globalHomeDir}/${appId}`;\nexport const resolveAppPath = (appId, filePath) => {\n    if (appId == null) {\n        return path.resolve(globalHomeDir, filePath);\n    }\n    return path.resolve(getAppHomeDir(appId), filePath);\n};\nfunction ensureParent(pyodide, filePath) {\n    const normalized = path.normalize(filePath);\n    const dirPath = path.dirname(normalized);\n    const dirPathSegments = dirPath.split(/(?=\\/)/);\n    let subDirPath = \"\";\n    for (const dirPathSegment of dirPathSegments) {\n        subDirPath += dirPathSegment;\n        const analysis = pyodide.FS.analyzePath(subDirPath);\n        if (analysis.exists && analysis.object) {\n            if (!pyodide.FS.isDir(analysis.object.mode)) {\n                throw new Error(`\"${subDirPath}\" already exists and is not a directory.`);\n            }\n            continue;\n        }\n        try {\n            pyodide.FS.mkdir(subDirPath);\n        }\n        catch (err) {\n            console.error(`Failed to create a directory \"${subDirPath}\"`);\n            throw err;\n        }\n    }\n}\nexport function writeFileWithParents(pyodide, filePath, data, opts) {\n    ensureParent(pyodide, filePath);\n    pyodide.FS.writeFile(filePath, data, opts);\n}\nexport function renameWithParents(pyodide, oldPath, newPath) {\n    ensureParent(pyodide, newPath);\n    pyodide.FS.rename(oldPath, newPath);\n}\n//# sourceMappingURL=file.js.map","// Ref: https://peps.python.org/pep-0508/#grammar\nconst FIRST_CHAR_OF_EXTRAS = \"[\";\nconst FIRST_CHAR_OF_VERSIONSPEC = \"(<=>!~\";\nconst FIRST_CHAR_OF_QUOTED_MARKER = \";\";\nconst FIRST_CHAR_OF_URLSPEC = \"@\";\nconst RX_CHAR_FOLLOWING_NAME_WITHOUT_WSP = new RegExp(\n  `[${\n    FIRST_CHAR_OF_EXTRAS +\n    FIRST_CHAR_OF_VERSIONSPEC +\n    FIRST_CHAR_OF_QUOTED_MARKER +\n    FIRST_CHAR_OF_URLSPEC\n  }]`,\n);\nfunction getPackageName(req: string): string {\n  const parts = req.split(RX_CHAR_FOLLOWING_NAME_WITHOUT_WSP);\n  return parts[0].trim();\n}\n\nexport function validateRequirements(requirements: string[]): string[] {\n  requirements.forEach((req) => {\n    let url: URL;\n    try {\n      url = new URL(req);\n    } catch {\n      // `req` is not a URL -> OK\n      return;\n    }\n\n    // Ref: The scheme checker in the micropip implementation is https://github.com/pyodide/micropip/blob/v0.1.0/micropip/_compat_in_pyodide.py#L23-L26\n    if (url.protocol === \"emfs:\" || url.protocol === \"file:\") {\n      throw new Error(\n        `\"emfs:\" and \"file:\" protocols are not allowed for the requirement (${req})`,\n      );\n    }\n  });\n\n  const validatedRequirements = requirements.filter((req) => {\n    const isStreamlit = getPackageName(req) === \"streamlit\";\n    if (isStreamlit) {\n      console.warn(\n        `Streamlit is specified in the requirements (\"${req}\"), but it will be ignored. A built-in version of Streamlit will be used.`,\n      );\n      return false;\n    }\n\n    return true;\n  });\n\n  return validatedRequirements;\n}\n","/// <reference lib=\"WebWorker\" />\nexport async function resolvePyodideUrl(pyodideUrl) {\n    const isNode = typeof process !== \"undefined\" && process.versions?.node;\n    let sep;\n    if (isNode) {\n        const nodePath = await import(/* webpackIgnore: true */ \"node:path\");\n        sep = nodePath.sep;\n    }\n    else {\n        sep = \"/\"; // URL path separator\n    }\n    // Ref: https://github.com/jupyterlite/pyodide-kernel/blob/v0.1.3/packages/pyodide-kernel/src/kernel.ts#L55\n    const pyodideIndexURL = pyodideUrl.slice(0, pyodideUrl.lastIndexOf(sep) + 1);\n    // Ref: https://github.com/jupyterlite/pyodide-kernel/blob/v0.1.3/packages/pyodide-kernel/src/worker.ts#L40-L54\n    if (pyodideUrl.endsWith(\".mjs\")) {\n        if (isNode) {\n            // Special care for Node.js on Windows because the `file://` scheme is required in the URL passed to import() on Windows. See https://github.com/whitphx/stlite/issues/957\n            const nodePath = await import(/* webpackIgnore: true */ \"node:path\");\n            const nodeUrl = await import(/* webpackIgnore: true */ \"node:url\");\n            const possiblyLocalFilePath = !pyodideUrl.includes(\"://\");\n            if (possiblyLocalFilePath && nodePath.isAbsolute(pyodideUrl)) {\n                pyodideUrl = nodeUrl.pathToFileURL(pyodideUrl).href;\n            }\n        }\n        return {\n            scriptURL: pyodideUrl,\n            pyodideIndexURL,\n            isESModule: true,\n        };\n    }\n    else {\n        return {\n            scriptURL: pyodideUrl,\n            pyodideIndexURL,\n            isESModule: false,\n        };\n    }\n}\nexport async function initPyodide(pyodideUrl, loadPyodideOptions) {\n    const { scriptURL, pyodideIndexURL, isESModule } = await resolvePyodideUrl(pyodideUrl);\n    // Ref: https://github.com/jupyterlite/pyodide-kernel/blob/v0.1.3/packages/pyodide-kernel/src/worker.ts#L40-L54\n    let loadPyodide;\n    if (isESModule) {\n        // note: this does not work at all in firefox\n        const pyodideModule = await import(\n        /* webpackIgnore: true */ /* @vite-ignore */ scriptURL);\n        loadPyodide = pyodideModule.loadPyodide;\n    }\n    else {\n        importScripts(scriptURL);\n        loadPyodide = self.loadPyodide;\n    }\n    return loadPyodide({ ...loadPyodideOptions, indexURL: pyodideIndexURL });\n}\n//# sourceMappingURL=pyodide-loader.js.map","export function mockPyArrow(pyodide) {\n    pyodide.runPython(`\nimport micropip\nmicropip.add_mock_package(\n    \"pyarrow\", \"0.0.1\",\n    modules={\n        \"pyarrow\": \"\"\"\n__version__ = '0.0.1'  # TODO: Update when releasing\n\n\nclass Table:\n    @classmethod\n    def from_pandas(*args, **kwargs):\n        raise NotImplementedError(\"stlite is not supporting this method.\")\n\n\nclass Array:\n    def __init__(self, *args, **kwargs):\n        raise NotImplementedError(\"stlite is not supporting PyArrow.Array\")\n\n\nclass ChunkedArray:\n    def __init__(self, *args, **kwargs):\n        raise NotImplementedError(\"stlite is not supporting PyArrow.ChunkedArray\")\n\"\"\"\n    }\n)\n`);\n}\n//# sourceMappingURL=mock.js.map","function tryModuleAutoLoad(pyodide, callback, sources) {\n    // Ref: `pyodide.loadPackagesFromImports` (https://github.com/pyodide/pyodide/blob/0.26.0/src/js/api.ts#L191)\n    const pyodidePy = pyodide.pyimport(\"pyodide\");\n    const findImports = (source) => pyodidePy.code.find_imports(source).toJs();\n    const importsArr = sources.map((source) => findImports(source));\n    const imports = Array.from(new Set(importsArr.flat()));\n    const notFoundImports = imports.filter((name) => !pyodide.runPython(`__import__('importlib').util.find_spec('${name}')`));\n    const packagesToLoad = notFoundImports\n        .map((name) => pyodide._api._import_name_to_package_name.get(name))\n        .filter((name) => name);\n    if (packagesToLoad.length === 0) {\n        return Promise.resolve();\n    }\n    const packageLoadPromise = pyodide.loadPackage(packagesToLoad);\n    callback(packagesToLoad, packageLoadPromise);\n    return packageLoadPromise.then();\n}\nexport function dispatchModuleAutoLoading(pyodide, callback, sources) {\n    const autoLoadPromise = tryModuleAutoLoad(pyodide, callback, sources);\n    // `autoInstallPromise` will be awaited in the script_runner on the Python side.\n    const setModuleAutoLoadPromise = pyodide.runPython(`\ndef __set_module_auto_load_promise__(promise):\n    from streamlit.runtime.scriptrunner import script_runner\n    script_runner.moduleAutoLoadPromise = promise\n\n__set_module_auto_load_promise__`); // The last line evaluates to the function so it is returned from pyodide.runPython() to the JS side.\n    setModuleAutoLoadPromise(autoLoadPromise);\n}\n//# sourceMappingURL=module-auto-load.js.map","export async function getCodeCompletions(jedi, code, position) {\n    const { line, column } = position;\n    const script = jedi.Script(code);\n    if (line > script._code_lines.length) {\n        return [];\n    }\n    const jediCompletions = script.complete.callKwargs({\n        line: line,\n        column: column,\n        fuzzy: false,\n    });\n    const completionItems = [];\n    for (const jediCompletion of jediCompletions.toJs()) {\n        completionItems.push({\n            name: jediCompletion.name,\n            type: jediCompletion.$type, // PyProxy.type is overridden in Pyodide. We need to access it this way. Ref: https://github.com/pyodide/pyodide/issues/4032\n            docstring: jediCompletion.docstring.callKwargs({ raw: true }),\n            complete: jediCompletion.complete,\n        });\n        jediCompletion.destroy();\n    }\n    return completionItems;\n}\n//# sourceMappingURL=code_completion.js.map","/// <reference lib=\"WebWorker\" />\nimport { resolveAppPath, getAppHomeDir, writeFileWithParents, renameWithParents, } from \"./file\";\nimport { validateRequirements } from \"@stlite/common/src/requirements\";\nimport { initPyodide } from \"./pyodide-loader\";\nimport { mockPyArrow } from \"./mock\";\nimport { dispatchModuleAutoLoading, } from \"./module-auto-load\";\nimport { getCodeCompletions } from \"./code_completion\";\nlet initPyodidePromise = null;\nasync function loadPyodideAndPackages(defaultPyodideUrl, appId, initData, onModuleAutoLoad, onProgress) {\n    const { files, archives, requirements: unvalidatedRequirements, prebuiltPackageNames: prebuiltPackages, wheels, installs, pyodideUrl = defaultPyodideUrl, streamlitConfig, idbfsMountpoints, nodefsMountpoints, moduleAutoLoad, env, languageServer, } = initData;\n    const requirements = validateRequirements(unvalidatedRequirements); // Blocks the not allowed wheel URL schemes.\n    if (initPyodidePromise) {\n        onProgress(\"Pyodide is already loaded.\");\n        console.debug(\"Pyodide is already loaded.\");\n    }\n    else {\n        onProgress(\"Loading Pyodide.\");\n        console.debug(\"Loading Pyodide.\");\n        initPyodidePromise = initPyodide(pyodideUrl, {\n            stdout: console.log,\n            stderr: console.error,\n        });\n        // NOTE: It's important to install the user-specified requirements\n        // and the core packages such as the customized Streamlit and stlite-lib wheels in the same `micropip.install` call below,\n        // which satisfies the following two requirements:\n        // 1. It allows users to specify the versions of Streamlit's dependencies via requirements.txt\n        // before these versions are automatically resolved by micropip when installing Streamlit from the custom wheel\n        // (installing the user-reqs must be earlier than or equal to installing the custom wheels).\n        // 2. It also resolves the `streamlit` package version required by the user-specified requirements to the appropriate version,\n        // which avoids the problem of https://github.com/whitphx/stlite/issues/675\n        // (installing the custom wheels must be earlier than or equal to installing the user-reqs).\n        const corePackages = [];\n        if (wheels) {\n            corePackages.push(wheels.streamlit);\n            corePackages.push(wheels.stliteLib);\n        }\n        if (languageServer) {\n            corePackages.push(\"jedi\");\n        }\n        requirements.unshift(...corePackages);\n        console.debug(\"Loaded Pyodide\");\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const pyodide = // XXX: `{ FS: any }` is a temporary workaround to fix the type error.\n     await initPyodidePromise;\n    if (env) {\n        // We could've used the env parameter in pyodide initialization,\n        // but then some default environment variables like HOME were not set.\n        console.debug(\"Setting environment variables\", env);\n        const os = pyodide.pyimport(\"os\");\n        os.environ.update(pyodide.toPy(env));\n        console.debug(\"Set environment variables\", os.environ);\n    }\n    let useIdbfs = false;\n    if (idbfsMountpoints) {\n        useIdbfs = true;\n        idbfsMountpoints.forEach((mountpoint) => {\n            pyodide.FS.mkdir(mountpoint);\n            pyodide.FS.mount(pyodide.FS.filesystems.IDBFS, {}, mountpoint);\n        });\n        await new Promise((resolve, reject) => {\n            pyodide.FS.syncfs(true, (err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    if (nodefsMountpoints) {\n        Object.entries(nodefsMountpoints).forEach(([mountpoint, path]) => {\n            pyodide.FS.mkdir(mountpoint);\n            pyodide.FS.mount(pyodide.FS.filesystems.NODEFS, { root: path }, mountpoint);\n        });\n    }\n    // Mount files\n    onProgress(\"Mounting files.\");\n    const pythonFilePaths = [];\n    await Promise.all(Object.keys(files).map(async (path) => {\n        const file = files[path];\n        path = resolveAppPath(appId, path);\n        let data;\n        if (\"url\" in file) {\n            console.debug(`Fetch a file from ${file.url}`);\n            data = await fetch(file.url)\n                .then((res) => res.arrayBuffer())\n                .then((buffer) => new Uint8Array(buffer));\n        }\n        else {\n            data = file.data;\n        }\n        console.debug(`Write a file \"${path}\"`);\n        writeFileWithParents(pyodide, path, data, files.opts);\n        if (path.endsWith(\".py\")) {\n            pythonFilePaths.push(path);\n        }\n    }));\n    // Unpack archives\n    onProgress(\"Unpacking archives.\");\n    await Promise.all(archives.map(async (archive) => {\n        let buffer;\n        if (\"url\" in archive) {\n            console.debug(`Fetch an archive from ${archive.url}`);\n            buffer = await fetch(archive.url).then((res) => res.arrayBuffer());\n        }\n        else {\n            buffer = archive.buffer;\n        }\n        const { format, options } = archive;\n        console.debug(`Unpack an archive`, { format, options });\n        pyodide.unpackArchive(buffer, format, options);\n    }));\n    await pyodide.loadPackage(\"micropip\");\n    const micropip = pyodide.pyimport(\"micropip\");\n    onProgress(\"Mocking some packages.\");\n    console.debug(\"Mock pyarrow\");\n    mockPyArrow(pyodide);\n    console.debug(\"Mocked pyarrow\");\n    // NOTE: Installing packages must be AFTER restoring the archives\n    // because they may contain packages to be restored into the site-packages directory.\n    onProgress(\"Installing packages.\");\n    console.debug(\"Installing the prebuilt packages:\", prebuiltPackages);\n    await pyodide.loadPackage(prebuiltPackages);\n    console.debug(\"Installed the prebuilt packages\");\n    console.debug(\"Installing the requirements:\", requirements);\n    await micropip.install.callKwargs(requirements, { keep_going: true });\n    console.debug(\"Installed the requirements\");\n    if (installs) {\n        console.debug(\"Installing the additional requirements\");\n        await Promise.all(installs.map(({ requirements: unvalidatedRequirements, options }) => {\n            const requirements = validateRequirements(unvalidatedRequirements); // Blocks the not allowed wheel URL schemes.\n            console.debug(\"Installing the requirements:\", requirements);\n            return micropip.install.callKwargs(requirements, options ?? {});\n        }));\n    }\n    if (moduleAutoLoad) {\n        const sources = pythonFilePaths.map((path) => pyodide.FS.readFile(path, { encoding: \"utf8\" }));\n        dispatchModuleAutoLoading(pyodide, onModuleAutoLoad, sources);\n    }\n    // The following code is necessary to avoid errors like `NameError: name '_imp' is not defined`\n    // at importing installed packages.\n    await pyodide.runPythonAsync(`\nimport importlib\nimportlib.invalidate_caches()\n`);\n    onProgress(\"Loading streamlit package.\");\n    console.debug(\"Loading the Streamlit package\");\n    // Importing the `streamlit` module takes most of the time,\n    // so we first run this step independently for clearer logs and easy exec-time profiling.\n    // For https://github.com/whitphx/stlite/issues/427\n    await pyodide.runPythonAsync(`\nimport streamlit.runtime\n  `);\n    console.debug(\"Loaded the Streamlit package\");\n    onProgress(\"Setting up the loggers.\");\n    console.debug(\"Setting the loggers\");\n    // Fix the Streamlit's logger instantiating strategy, which violates the standard and is problematic for us.\n    // See https://github.com/streamlit/streamlit/issues/4742\n    await pyodide.runPythonAsync(`\nimport logging\nimport streamlit.logger\n\nstreamlit.logger.get_logger = logging.getLogger\nstreamlit.logger.setup_formatter = None\nstreamlit.logger.update_formatter = lambda *a, **k: None\nstreamlit.logger.set_log_level = lambda *a, **k: None\n\nfor name in streamlit.logger._loggers.keys():\n    if name == \"root\":\n        name = \"streamlit\"\n    logger = logging.getLogger(name)\n    logger.propagate = True\n    logger.handlers.clear()\n    logger.setLevel(logging.NOTSET)\n\nstreamlit.logger._loggers = {}\n`);\n    // Then configure the logger.\n    const logCallback = (levelno, msg) => {\n        if (levelno >= 40) {\n            console.error(msg);\n        }\n        else if (levelno >= 30) {\n            console.warn(msg);\n        }\n        else if (levelno >= 20) {\n            console.info(msg);\n        }\n        else {\n            console.debug(msg);\n        }\n    };\n    const setupLoggers = pyodide.runPython(`\ndef __setup_loggers__(streamlit_level, streamlit_message_format, callback):\n    class JsHandler(logging.Handler):\n        def emit(self, record):\n            msg = self.format(record)\n            callback(record.levelno, msg)\n\n\n    root_message_format = \"%(levelname)s:%(name)s:%(message)s\"\n\n    root_logger = logging.getLogger()\n    root_logger.handlers.clear()\n    root_formatter = logging.Formatter(root_message_format)\n    root_handler = JsHandler()\n    root_handler.setFormatter(root_formatter)\n    root_logger.addHandler(root_handler)\n    root_logger.setLevel(logging.DEBUG)\n\n    streamlit_logger = logging.getLogger(\"streamlit\")\n    streamlit_logger.propagate = False\n    streamlit_logger.handlers.clear()\n    streamlit_formatter = logging.Formatter(streamlit_message_format)\n    streamlit_handler = JsHandler()\n    streamlit_handler.setFormatter(streamlit_formatter)\n    streamlit_logger.addHandler(streamlit_handler)\n    streamlit_logger.setLevel(streamlit_level.upper())\n\n__setup_loggers__`); // This last line evaluates to the function so it is returned from pyodide.runPython() to the JS side.\n    const streamlitLogLevel = (streamlitConfig?.[\"logger.level\"] ?? \"INFO\").toString();\n    const streamlitLogMessageFormat = streamlitConfig?.[\"logger.messageFormat\"] ?? \"%(asctime)s %(message)s\";\n    setupLoggers(streamlitLogLevel, streamlitLogMessageFormat, logCallback);\n    console.debug(\"Set the loggers\");\n    onProgress(\"Mocking some Streamlit functions for the browser environment.\");\n    console.debug(\"Mocking some Streamlit functions\");\n    // Disable caching. See https://github.com/whitphx/stlite/issues/495\n    await pyodide.runPythonAsync(`\nimport streamlit\n\ndef is_cacheable_msg(msg):\n  return False\n\nstreamlit.runtime.runtime.is_cacheable_msg = is_cacheable_msg\n`);\n    console.debug(\"Mocked some Streamlit functions\");\n    if (useIdbfs) {\n        onProgress(\"Setting up the IndexedDB filesystem synchronizer.\");\n        console.debug(\"Setting up the IndexedDB filesystem synchronizer\");\n        // IDBFS needs to be synced by calling `pyodide.FS.syncfs`.\n        // Ref: https://emscripten.org/docs/api_reference/Filesystem-API.html#filesystem-api-idbfs\n        let fsSyncing = false; // Sometimes `scriptFinishedCallback` is called many time at once so we avoid unnecessary simultaneous calls of `pyodide.FS.syncfs`.\n        const scriptFinishedCallback = () => {\n            console.debug(\"The script has finished. Syncing the filesystem.\");\n            if (!fsSyncing) {\n                fsSyncing = true;\n                pyodide.FS.syncfs(false, (err) => {\n                    fsSyncing = false;\n                    if (err) {\n                        console.error(err);\n                    }\n                });\n            }\n        };\n        // TODO: Run the callback only for the current app in the case of SharedWorker mode, where multiple runtimes exist.\n        // Monkey-patch the `AppSession._on_scriptrunner_event` method to call `scriptFinishedCallback` when the script is finished.\n        const setupScriptFinishedCallback = await pyodide.runPython(`\ndef __setup_script_finished_callback__(callback):\n    from streamlit.runtime.app_session import AppSession\n    from streamlit.runtime.scriptrunner import ScriptRunnerEvent\n\n    def wrap_app_session_on_scriptrunner_event(original_method):\n        def wrapped(self, *args, **kwargs):\n            if \"event\" in kwargs:\n                event = kwargs[\"event\"]\n                if event == ScriptRunnerEvent.SCRIPT_STOPPED_WITH_SUCCESS or event == ScriptRunnerEvent.SCRIPT_STOPPED_FOR_RERUN or event == ScriptRunnerEvent.SHUTDOWN:\n                    callback()\n            return original_method(self, *args, **kwargs)\n        return wrapped\n\n    AppSession._on_scriptrunner_event = wrap_app_session_on_scriptrunner_event(AppSession._on_scriptrunner_event)\n\n__setup_script_finished_callback__`); // This last line evaluates to the function so it is returned from pyodide.runPython() to the JS side.\n        setupScriptFinishedCallback(scriptFinishedCallback);\n        console.debug(\"Set up the IndexedDB filesystem synchronizer\");\n    }\n    // The code below is based on streamlit.web.cli.main_run().\n    console.debug(\"Setting up the Streamlit configuration\");\n    const { load_config_options } = pyodide.pyimport(\"stlite_lib.bootstrap\");\n    const streamlitFlagOptions = {\n        // gatherUsageStats is disabled as default, but can be enabled explicitly by setting it to true.\n        \"browser.gatherUsageStats\": false,\n        ...streamlitConfig,\n        \"runner.fastReruns\": false, // Fast reruns do not work well with the async script runner of stlite. See https://github.com/whitphx/stlite/pull/550#issuecomment-1505485865.\n    };\n    const sharedWorkerMode = appId != null;\n    load_config_options(pyodide.toPy(streamlitFlagOptions), sharedWorkerMode);\n    console.debug(\"Set up the Streamlit configuration\");\n    // Load Jedi if the language server is enabled.\n    let jedi;\n    if (languageServer) {\n        onProgress(\"Loading auto-completion engine.\");\n        console.debug(\"Loading Jedi\");\n        try {\n            jedi = (await pyodide.pyimport(\"jedi\"));\n            console.debug(\"Loaded Jedi\");\n        }\n        catch (error) {\n            console.error(\"Failed to load Jedi:\", error);\n            jedi = undefined;\n        }\n    }\n    return {\n        pyodide,\n        micropip,\n        jedi,\n        initData,\n    };\n}\nasync function bootstrapServer(pyodide, appId, entrypoint) {\n    const canonicalEntrypoint = resolveAppPath(appId, entrypoint);\n    // The code below is based on streamlit.web.cli.main_run().\n    console.debug(\"Preparing the Streamlit environment\");\n    const { prepare } = pyodide.pyimport(\"stlite_lib.bootstrap\");\n    prepare(canonicalEntrypoint, []);\n    console.debug(\"Prepared the Streamlit environment\");\n    console.debug(\"Booting up the Streamlit server\");\n    const Server = pyodide.pyimport(\"stlite_lib.server.Server\");\n    const httpServer = Server(canonicalEntrypoint, appId ? getAppHomeDir(appId) : undefined);\n    await httpServer.start();\n    console.debug(\"Booted up the Streamlit server\");\n    return httpServer;\n}\nexport function startWorkerEnv(defaultPyodideUrl, postMessage, presetInitialData, appId) {\n    function onProgress(message) {\n        postMessage({\n            type: \"event:progress\",\n            data: {\n                message,\n            },\n        });\n    }\n    const onModuleAutoLoad = (packagesToLoad, onLoad) => {\n        const channel = new MessageChannel();\n        postMessage({\n            type: \"event:moduleAutoLoad\",\n            data: {\n                packagesToLoad,\n            },\n        }, [channel.port2]);\n        onLoad\n            .then((loadedPackages) => {\n            channel.port1.postMessage({\n                type: \"moduleAutoLoad:success\",\n                data: {\n                    loadedPackages,\n                },\n            });\n            channel.port1.close();\n        })\n            .catch((err) => {\n            channel.port1.postMessage({\n                type: \"moduleAutoLoad:error\",\n                error: err,\n            });\n            channel.port1.close();\n            throw err;\n        });\n    };\n    let pyodideReadyPromise = null;\n    let serverReadyPromise = null;\n    /**\n     * Process a message sent to the worker.\n     *\n     * @param event The message event to process\n     */\n    const onmessage = async (event) => {\n        const msg = event.data;\n        // Special case for transmitting the initial data\n        if (msg.type === \"initData\") {\n            const initialDataFromMessage = msg.data;\n            const initData = {\n                ...presetInitialData,\n                ...initialDataFromMessage,\n            };\n            console.debug(\"Initial data\", initData);\n            pyodideReadyPromise = loadPyodideAndPackages(defaultPyodideUrl, appId, initData, onModuleAutoLoad, onProgress);\n            pyodideReadyPromise\n                .then(({ pyodide }) => {\n                onProgress(\"Booting up the Streamlit server.\");\n                serverReadyPromise = bootstrapServer(pyodide, appId, initData.entrypoint);\n                return serverReadyPromise;\n            })\n                .then(() => {\n                postMessage({\n                    type: \"event:loaded\",\n                });\n            })\n                .catch((error) => {\n                console.error(error);\n                postMessage({\n                    type: \"event:error\",\n                    data: {\n                        error,\n                    },\n                });\n            });\n            return;\n        }\n        if (!pyodideReadyPromise) {\n            throw new Error(\"Pyodide initialization has not been started yet.\");\n        }\n        if (!serverReadyPromise) {\n            throw new Error(\"Streamlit server has not been started yet.\");\n        }\n        const v = await pyodideReadyPromise;\n        const pyodide = v.pyodide;\n        const micropip = v.micropip;\n        const jedi = v.jedi;\n        const { moduleAutoLoad } = v.initData;\n        const httpServer = await serverReadyPromise;\n        const messagePort = event.ports[0];\n        function reply(message) {\n            messagePort.postMessage(message);\n        }\n        try {\n            switch (msg.type) {\n                case \"reboot\": {\n                    console.debug(\"Reboot the Streamlit server\", msg.data);\n                    const { entrypoint } = msg.data;\n                    httpServer.stop();\n                    console.debug(\"Booting up the Streamlit server\");\n                    serverReadyPromise = bootstrapServer(pyodide, appId, entrypoint);\n                    await serverReadyPromise;\n                    console.debug(\"Booted up the Streamlit server\");\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"websocket:connect\": {\n                    console.debug(\"websocket:connect\", msg.data);\n                    const { path } = msg.data;\n                    httpServer.start_websocket(path, (message, binary) => {\n                        // XXX: Now there is no session mechanism\n                        if (binary) {\n                            const messageProxy = message;\n                            try {\n                                // We use toJs() rather than getBuffer(). https://pyodide.org/en/stable/usage/type-conversions.html#using-python-buffer-objects-from-javascript\n                                // getBuffer() returns a reference to the Wasm heap memory without copying it,\n                                // but it would be copied to the JS heap when it's transferred to the main thread via `postMessage()` anyway,\n                                // so we choose toJs() for simplicity.\n                                // With toJs(), the buffer is copied to the JS heap,\n                                // and the JS buffer will be transferred to the main thread via `postMessage()` with `[ab]` as the second argument.\n                                const u8 = messageProxy.toJs();\n                                const ab = u8.buffer.slice(u8.byteOffset, u8.byteOffset + u8.byteLength);\n                                postMessage({\n                                    type: \"websocket:message\",\n                                    data: {\n                                        payload: ab,\n                                    },\n                                }, [ab]);\n                            }\n                            finally {\n                                messageProxy.destroy();\n                            }\n                        }\n                        else {\n                            const messageStr = message;\n                            postMessage({\n                                type: \"websocket:message\",\n                                data: {\n                                    payload: messageStr,\n                                },\n                            });\n                        }\n                    });\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"websocket:send\": {\n                    console.debug(\"websocket:send\", msg.data);\n                    const { payload } = msg.data;\n                    httpServer.receive_websocket_from_js(payload);\n                    break;\n                }\n                case \"http:request\": {\n                    console.debug(\"http:request\", msg.data);\n                    const { request } = msg.data;\n                    const onResponse = (statusCode, _headers, _body) => {\n                        const headers = new Map(_headers.toJs()); // Pyodide converts dict to LiteralMap, not Map, which can't be cloned and sent to the main thread. So we convert it to Map here. Ref: https://github.com/pyodide/pyodide/pull/4576\n                        const body = _body.toJs();\n                        console.debug({ statusCode, headers, body });\n                        reply({\n                            type: \"http:response\",\n                            data: {\n                                response: {\n                                    statusCode,\n                                    headers,\n                                    body,\n                                },\n                            },\n                        });\n                    };\n                    httpServer.receive_http_from_js(request.method, decodeURIComponent(request.path), request.headers, request.body, onResponse);\n                    break;\n                }\n                case \"file:write\": {\n                    const { path: rawPath, data: fileData, opts } = msg.data;\n                    const path = resolveAppPath(appId, rawPath);\n                    if (moduleAutoLoad &&\n                        typeof fileData === \"string\" &&\n                        path.endsWith(\".py\")) {\n                        // Auto-install must be dispatched before writing the file\n                        // because its promise should be set before saving the file triggers rerunning.\n                        console.debug(`Auto install the requirements in ${path}`);\n                        dispatchModuleAutoLoading(pyodide, onModuleAutoLoad, [fileData]);\n                    }\n                    console.debug(`Write a file \"${path}\"`);\n                    writeFileWithParents(pyodide, path, fileData, opts);\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"file:rename\": {\n                    const { oldPath: rawOldPath, newPath: rawNewPath } = msg.data;\n                    const oldPath = resolveAppPath(appId, rawOldPath);\n                    const newPath = resolveAppPath(appId, rawNewPath);\n                    console.debug(`Rename \"${oldPath}\" to ${newPath}`);\n                    renameWithParents(pyodide, oldPath, newPath);\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"file:unlink\": {\n                    const { path: rawPath } = msg.data;\n                    const path = resolveAppPath(appId, rawPath);\n                    console.debug(`Remove \"${path}`);\n                    pyodide.FS.unlink(path);\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"file:read\": {\n                    const { path, opts } = msg.data;\n                    console.debug(`Read \"${path}\"`);\n                    const content = pyodide.FS.readFile(path, opts);\n                    reply({\n                        type: \"reply:file:read\",\n                        data: {\n                            content,\n                        },\n                    });\n                    break;\n                }\n                case \"install\": {\n                    const { requirements: unvalidatedRequirements, options } = msg.data;\n                    const requirements = validateRequirements(unvalidatedRequirements); // Blocks the not allowed wheel URL schemes.\n                    console.debug(\"Install the requirements:\", requirements);\n                    await micropip.install\n                        .callKwargs(requirements, options ?? {})\n                        .then(() => {\n                        console.debug(\"Successfully installed\");\n                        reply({\n                            type: \"reply\",\n                        });\n                    });\n                    break;\n                }\n                case \"setEnv\": {\n                    const { env } = msg.data;\n                    const os = pyodide.pyimport(\"os\");\n                    os.environ.update(pyodide.toPy(env));\n                    console.debug(\"Successfully set the environment variables\", env);\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"code_completion\": {\n                    if (!jedi) {\n                        throw new Error(\"Jedi is not installed\");\n                    }\n                    const { code, line, column } = msg.data;\n                    const codeCompletions = await getCodeCompletions(jedi, code, {\n                        line,\n                        column,\n                    });\n                    reply({\n                        type: \"reply:code_completion\",\n                        data: {\n                            codeCompletions,\n                        },\n                    });\n                    break;\n                }\n            }\n        }\n        catch (error) {\n            console.error(error);\n            if (!(error instanceof Error)) {\n                throw error;\n            }\n            // The `error` object may contain non-serializable properties such as function (for example Pyodide.FS.ErrnoError which has a `.setErrno` function),\n            // so it must be converted to a plain object before sending it to the main thread.\n            // Otherwise, the following error will be thrown:\n            // `Uncaught (in promise) DOMException: Failed to execute 'postMessage' on 'MessagePort': #<Object> could not be cloned.`\n            // Also, the JSON.stringify() and JSON.parse() approach like https://stackoverflow.com/a/42376465/13103190\n            // does not work for Error objects because the Error object is not enumerable.\n            // So we use the following approach to clone the Error object.\n            const cloneableError = new Error(error.message);\n            cloneableError.name = error.name;\n            cloneableError.stack = error.stack;\n            reply({\n                type: \"reply\",\n                error: cloneableError,\n            });\n        }\n    };\n    postMessage({\n        type: \"event:start\",\n    });\n    return onmessage;\n}\n//# sourceMappingURL=worker-runtime.js.map","const charset = \"abcdefghijklmnopqrstuvwxyz\";\nconst charsetSize = charset.length;\n// This is not cryptographically secure, but it's good enough for our use case.\nexport function generateRandomAppId(length) {\n    let id = \"\";\n    for (let i = 0; i < length; i++) {\n        const randomIndex = Math.floor(Math.random() * charsetSize);\n        id += charset[randomIndex];\n    }\n    return id;\n}\n//# sourceMappingURL=app-id.js.map","/// <reference lib=\"WebWorker\" />\nimport { startWorkerEnv } from \"./worker-runtime\";\nimport { generateRandomAppId } from \"./app-id\";\nconst pyodideUrl = \"https://cdn.jsdelivr.net/pyodide/v0.28.2/full/pyodide.mjs\";\nif (\"postMessage\" in self) {\n    // Dedicated worker\n    self.onmessage = startWorkerEnv(pyodideUrl, (event, transfer) => transfer\n        ? self.postMessage(event, transfer)\n        : self.postMessage(event));\n}\nelse {\n    // Shared worker\n    const existingAppIds = [];\n    self.onconnect = (event) => {\n        // Generate app ID and ensure it's unique.\n        let appId;\n        do {\n            appId = generateRandomAppId(4);\n        } while (existingAppIds.includes(appId));\n        existingAppIds.push(appId);\n        console.debug(\"SharedWorker mode.\", { appId });\n        const sharedWorkerPort = event.ports[0];\n        sharedWorkerPort.onmessage = startWorkerEnv(pyodideUrl, (event, transfer) => transfer\n            ? sharedWorkerPort.postMessage(event, transfer)\n            : sharedWorkerPort.postMessage(event), undefined, appId);\n        sharedWorkerPort.start();\n    };\n}\n//# sourceMappingURL=worker.js.map"],"names":["assertPath","path","normalizeStringPosix","allowAboveRoot","res","lastSegmentLength","lastSlash","dots","code","i","lastSlashIndex","_format","sep","pathObject","dir","base","posix","resolvedPath","resolvedAbsolute","cwd","isAbsolute","trailingSeparator","joined","arg","from","to","fromStart","fromEnd","fromLen","toStart","toEnd","toLen","length","lastCommonSep","fromCode","toCode","out","hasRoot","end","matchedSlash","ext","start","extIdx","firstNonSlashEnd","startDot","startPart","preDotState","ret","pathBrowserify","globalHomeDir","getAppHomeDir","appId","resolveAppPath","filePath","ensureParent","pyodide","normalized","dirPathSegments","subDirPath","dirPathSegment","analysis","err","writeFileWithParents","data","opts","renameWithParents","oldPath","newPath","FIRST_CHAR_OF_EXTRAS","FIRST_CHAR_OF_VERSIONSPEC","FIRST_CHAR_OF_QUOTED_MARKER","FIRST_CHAR_OF_URLSPEC","RX_CHAR_FOLLOWING_NAME_WITHOUT_WSP","getPackageName","req","validateRequirements","requirements","url","resolvePyodideUrl","pyodideUrl","isNode","__viteBrowserExternal","pyodideIndexURL","nodePath","nodeUrl","initPyodide","loadPyodideOptions","scriptURL","isESModule","loadPyodide","mockPyArrow","tryModuleAutoLoad","callback","sources","pyodidePy","findImports","source","importsArr","packagesToLoad","name","packageLoadPromise","dispatchModuleAutoLoading","autoLoadPromise","getCodeCompletions","jedi","position","line","column","script","jediCompletions","completionItems","jediCompletion","initPyodidePromise","loadPyodideAndPackages","defaultPyodideUrl","initData","onModuleAutoLoad","onProgress","files","archives","unvalidatedRequirements","prebuiltPackages","wheels","installs","streamlitConfig","idbfsMountpoints","nodefsMountpoints","moduleAutoLoad","env","languageServer","corePackages","os","useIdbfs","mountpoint","resolve","reject","pythonFilePaths","file","buffer","archive","format","options","micropip","logCallback","levelno","msg","setupLoggers","streamlitLogLevel","streamlitLogMessageFormat","fsSyncing","scriptFinishedCallback","load_config_options","streamlitFlagOptions","sharedWorkerMode","error","bootstrapServer","entrypoint","canonicalEntrypoint","prepare","httpServer","startWorkerEnv","postMessage","presetInitialData","message","onLoad","channel","loadedPackages","pyodideReadyPromise","serverReadyPromise","onmessage","event","initialDataFromMessage","v","messagePort","reply","binary","messageProxy","u8","ab","payload","request","onResponse","statusCode","_headers","_body","headers","body","rawPath","fileData","rawOldPath","rawNewPath","content","codeCompletions","cloneableError","charset","charsetSize","generateRandomAppId","id","randomIndex","transfer","existingAppIds","sharedWorkerPort"],"mappings":"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","x_google_ignoreList":[0]}