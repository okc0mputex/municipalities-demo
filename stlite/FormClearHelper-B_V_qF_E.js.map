{"version":3,"file":"FormClearHelper-B_V_qF_E.js","sources":["../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect } from \"react\"\n\nimport { SignalConnection } from \"typed-signals\"\n\nimport { isValidFormId, notNullOrUndefined } from \"~lib/util/utils\"\nimport { WidgetStateManager } from \"~lib/WidgetStateManager\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly. Or just use the convenient\n   * hook `useFormClearHelper`, below.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      notNullOrUndefined(this.formClearListener) &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n\ninterface FormElementProtoInterface {\n  formId: string\n}\n\ninterface FormClearHelperArgs {\n  element: FormElementProtoInterface\n  widgetMgr: WidgetStateManager\n  onFormCleared: () => void\n}\n\nexport function useFormClearHelper({\n  element,\n  widgetMgr,\n  onFormCleared,\n}: FormClearHelperArgs): void {\n  useEffect(() => {\n    if (!isValidFormId(element.formId)) {\n      return\n    }\n\n    const formClearListener = widgetMgr.addFormClearedListener(\n      element.formId,\n      onFormCleared\n    )\n\n    return () => {\n      formClearListener.disconnect()\n    }\n  }, [element, widgetMgr, onFormCleared])\n}\n"],"names":["FormClearHelper","manageFormClearListener","widgetMgr","formId","listener","notNullOrUndefined","formClearListener","lastWidgetMgr","lastFormId","disconnect","isValidFormId","addFormClearedListener","undefined","useFormClearHelper","element","onFormCleared","useEffect"],"mappings":";AAuBO,MAAMA,EAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBpBC,wBACLC,GACAC,GACAC,GACM;AAEN,IACEC,EAAmB,KAAKC,iBAAiB,KACzC,KAAKC,kBAAkBL,KACvB,KAAKM,eAAeL,MAMtB,KAAKM,WAAAA,GAGAC,EAAcP,CAAM,MAKzB,KAAKG,oBAAoBJ,EAAUS,uBAAuBR,GAAQC,CAAQ,GAC1E,KAAKG,gBAAgBL,GACrB,KAAKM,aAAaL;AAAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOOM,aAAmB;AACxB,SAAKH,mBAAmBG,WAAAA,GACxB,KAAKH,oBAAoBM,QACzB,KAAKL,gBAAgBK,QACrB,KAAKJ,aAAaI;AAAAA,EACpB;AACF;AAYO,SAASC,EAAmB;AAAA,EACjCC,SAAAA;AAAAA,EACAZ,WAAAA;AAAAA,EACAa,eAAAA;AACmB,GAAS;AAC5BC,EAAAA,EAAAA,UAAU,MAAM;AACd,QAAI,CAACN,EAAcI,EAAQX,MAAM;AAC/B;AAGF,UAAMG,IAAoBJ,EAAUS,uBAClCG,EAAQX,QACRY,CACF;AAEA,WAAO,MAAM;AACXT,MAAAA,EAAkBG,WAAAA;AAAAA,IACpB;AAAA,EACF,GAAG,CAACK,GAASZ,GAAWa,CAAa,CAAC;AACxC;"}