{"version":3,"file":"index-8UOcgz84.js","sources":["../../../streamlit/frontend/lib/src/components/widgets/TextArea/heightUtils.ts","../../../streamlit/frontend/lib/src/components/widgets/TextArea/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/TextArea/TextArea.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Element, TextArea as TextAreaProto } from \"@streamlit/protobuf\"\n\nimport {\n  LabelVisibilityOptions,\n  labelVisibilityProtoValueToEnum,\n} from \"~lib/util/utils\"\n\n/**\n * Determines the height of the input that will correspond to the outer element\n * height provided by the user. Because text areas can be resized by dragging\n * the corners, we need to set the height on the input itself.\n *\n * @param outerElement - The outer element containing height configuration\n * @param element - The TextArea protocol buffer element\n * @returns The calculated height as a CSS string (e.g., \"100px\", \"100%\", \"auto\")\n */\nexport const getTextAreaHeight = (\n  outerElement: Element,\n  element: TextAreaProto\n): string => {\n  let height = \"auto\"\n  if (outerElement.heightConfig?.useStretch) {\n    height = \"100%\"\n  } else if (\n    outerElement.heightConfig?.pixelHeight &&\n    outerElement.heightConfig.pixelHeight > 0\n  ) {\n    const labelAndPadding =\n      labelVisibilityProtoValueToEnum(element.labelVisibility?.value) ===\n      LabelVisibilityOptions.Collapsed\n        ? 2\n        : 30\n    const innerHeight = outerElement.heightConfig.pixelHeight - labelAndPadding\n    height = `${innerHeight}px`\n  }\n  return height\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledTextAreaContainer = styled.div({\n  height: \"100%\",\n  display: \"flex\",\n  flexDirection: \"column\",\n})\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { FC, memo, useCallback, useRef, useState } from \"react\"\n\nimport { Textarea as UITextArea } from \"baseui/textarea\"\nimport uniqueId from \"lodash/uniqueId\"\n\nimport { Element, TextArea as TextAreaProto } from \"@streamlit/protobuf\"\n\nimport InputInstructions from \"~lib/components/shared/InputInstructions/InputInstructions\"\nimport { Placement } from \"~lib/components/shared/Tooltip\"\nimport TooltipIcon from \"~lib/components/shared/TooltipIcon\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"~lib/components/widgets/BaseWidget\"\nimport {\n  useBasicWidgetState,\n  ValueWithSource,\n} from \"~lib/hooks/useBasicWidgetState\"\nimport { useCalculatedWidth } from \"~lib/hooks/useCalculatedWidth\"\nimport { useEmotionTheme } from \"~lib/hooks/useEmotionTheme\"\nimport useOnInputChange from \"~lib/hooks/useOnInputChange\"\nimport useSubmitFormViaEnterKey from \"~lib/hooks/useSubmitFormViaEnterKey\"\nimport { useTextInputAutoExpand } from \"~lib/hooks/useTextInputAutoExpand\"\nimport useUpdateUiValue from \"~lib/hooks/useUpdateUiValue\"\nimport { isInForm, labelVisibilityProtoValueToEnum } from \"~lib/util/utils\"\nimport { WidgetStateManager } from \"~lib/WidgetStateManager\"\n\nimport { getTextAreaHeight } from \"./heightUtils\"\nimport { StyledTextAreaContainer } from \"./styled-components\"\n\nexport interface Props {\n  disabled: boolean\n  element: TextAreaProto\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n  // needed for height\n  outerElement: Element\n}\n\ntype TextAreaValue = string | null\n\nconst getStateFromWidgetMgr = (\n  widgetMgr: WidgetStateManager,\n  element: TextAreaProto\n): TextAreaValue | undefined => {\n  return widgetMgr.getStringValue(element) ?? element.default ?? null\n}\n\nconst getDefaultStateFromProto = (element: TextAreaProto): TextAreaValue => {\n  return element.default ?? null\n}\n\nconst getCurrStateFromProto = (element: TextAreaProto): TextAreaValue => {\n  return element.value ?? null\n}\n\nconst updateWidgetMgrState = (\n  element: TextAreaProto,\n  widgetMgr: WidgetStateManager,\n  valueWithSource: ValueWithSource<TextAreaValue>,\n  fragmentId?: string\n): void => {\n  widgetMgr.setStringValue(\n    element,\n    valueWithSource.value,\n    { fromUi: valueWithSource.fromUi },\n    fragmentId\n  )\n}\n\nconst TextArea: FC<Props> = ({\n  disabled,\n  element,\n  widgetMgr,\n  fragmentId,\n  outerElement,\n}) => {\n  const id = useRef(uniqueId(\"text_area_\")).current\n\n  const [width, elementRef] = useCalculatedWidth()\n\n  /**\n   * True if the user-specified state.value has not yet been synced to the WidgetStateManager.\n   */\n  const [dirty, setDirty] = useState(false)\n  /**\n   * Whether the area is currently focused.\n   */\n  const [focused, setFocused] = useState(false)\n\n  // Determine if we should use auto-expansion.\n  const isAutoHeight = outerElement.heightConfig?.useContent ?? false\n  // Disable resize if stretch height is enabled.\n  const isStretchHeight = outerElement.heightConfig?.useStretch ?? false\n\n  // For text area, we need to set the height on the input element and let\n  // that determine the height of the overall element so that resizing works.\n  const inputHeight = getTextAreaHeight(outerElement, element)\n\n  // Create ref for auto-expansion\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\n\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  const [uiValue, setUiValue] = useState<string | null>(\n    () => getStateFromWidgetMgr(widgetMgr, element) ?? null\n  )\n\n  const onFormCleared = useCallback(() => {\n    setUiValue(element.default ?? null)\n    setDirty(true)\n  }, [element])\n\n  const [value, setValueWithSource] = useBasicWidgetState<\n    TextAreaValue,\n    TextAreaProto\n  >({\n    getStateFromWidgetMgr,\n    getDefaultStateFromProto,\n    getCurrStateFromProto,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n    onFormCleared,\n  })\n\n  useUpdateUiValue(value, uiValue, setUiValue, dirty)\n\n  const theme = useEmotionTheme()\n\n  const {\n    height: autoExpandHeight,\n    maxHeight: autoExpandMaxHeight,\n    updateScrollHeight,\n  } = useTextInputAutoExpand({\n    textareaRef,\n    dependencies: [element.placeholder],\n  })\n\n  const commitWidgetValue = useCallback((): void => {\n    setDirty(false)\n    setValueWithSource({ value: uiValue, fromUi: true })\n  }, [uiValue, setValueWithSource])\n\n  const onBlur = useCallback(() => {\n    if (dirty) {\n      commitWidgetValue()\n    }\n    setFocused(false)\n  }, [dirty, commitWidgetValue])\n\n  const onFocus = useCallback(() => {\n    setFocused(true)\n  }, [])\n\n  const additionalAction = useCallback(() => {\n    if (isAutoHeight) {\n      updateScrollHeight()\n    }\n  }, [isAutoHeight, updateScrollHeight])\n\n  const onChange = useOnInputChange({\n    formId: element.formId,\n    maxChars: element.maxChars,\n    setDirty,\n    setUiValue,\n    setValueWithSource,\n    additionalAction,\n  })\n\n  const onKeyDown = useSubmitFormViaEnterKey(\n    element.formId,\n    commitWidgetValue,\n    dirty,\n    widgetMgr,\n    fragmentId,\n    true\n  )\n\n  const { placeholder, formId } = element\n\n  // Show \"Please enter\" instructions if in a form & allowed, or not in form and state is dirty.\n  const allowEnterToSubmit = isInForm({ formId })\n    ? widgetMgr.allowFormEnterToSubmit(formId)\n    : dirty\n\n  // Hide input instructions for small widget sizes.\n  const shouldShowInstructions =\n    focused && width > theme.breakpoints.hideWidgetDetails\n\n  return (\n    <StyledTextAreaContainer\n      className=\"stTextArea\"\n      data-testid=\"stTextArea\"\n      ref={elementRef}\n    >\n      <WidgetLabel\n        label={element.label}\n        disabled={disabled}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n        htmlFor={id}\n      >\n        {element.help && (\n          <StyledWidgetLabelHelp>\n            <TooltipIcon\n              content={element.help}\n              placement={Placement.TOP_RIGHT}\n            />\n          </StyledWidgetLabelHelp>\n        )}\n      </WidgetLabel>\n\n      <UITextArea\n        inputRef={isAutoHeight ? textareaRef : undefined}\n        value={uiValue ?? \"\"}\n        placeholder={placeholder}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n        aria-label={element.label}\n        disabled={disabled}\n        id={id}\n        overrides={{\n          Input: {\n            style: {\n              fontWeight: theme.fontWeights.normal,\n              lineHeight: theme.lineHeights.inputWidget,\n              // The default height of the text area is calculated to perfectly fit 3 lines of text.\n              height: isAutoHeight ? autoExpandHeight : inputHeight,\n              maxHeight: isAutoHeight ? autoExpandMaxHeight : \"\",\n              minHeight: theme.sizes.largestElementHeight,\n              resize: isStretchHeight ? \"none\" : \"vertical\",\n              // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n              paddingRight: theme.spacing.md,\n              paddingLeft: theme.spacing.md,\n              paddingBottom: theme.spacing.md,\n              paddingTop: theme.spacing.md,\n              \"::placeholder\": {\n                color: theme.colors.fadedText60,\n              },\n            },\n          },\n          Root: {\n            props: {\n              \"data-testid\": \"stTextAreaRootElement\",\n            },\n            style: {\n              // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n              borderLeftWidth: theme.sizes.borderWidth,\n              borderRightWidth: theme.sizes.borderWidth,\n              borderTopWidth: theme.sizes.borderWidth,\n              borderBottomWidth: theme.sizes.borderWidth,\n              flexGrow: 1,\n            },\n          },\n        }}\n      />\n\n      {shouldShowInstructions && (\n        <InputInstructions\n          dirty={dirty}\n          value={uiValue ?? \"\"}\n          maxLength={element.maxChars}\n          type={\"multiline\"}\n          inForm={isInForm({ formId })}\n          allowEnterToSubmit={allowEnterToSubmit}\n        />\n      )}\n    </StyledTextAreaContainer>\n  )\n}\n\nexport default memo(TextArea)\n"],"names":["getTextAreaHeight","outerElement","element","height","heightConfig","useStretch","pixelHeight","labelAndPadding","labelVisibilityProtoValueToEnum","labelVisibility","value","LabelVisibilityOptions","Collapsed","StyledTextAreaContainer","_styled","target","name","styles","getStateFromWidgetMgr","widgetMgr","getStringValue","default","getDefaultStateFromProto","getCurrStateFromProto","updateWidgetMgrState","valueWithSource","fragmentId","setStringValue","fromUi","TextArea","disabled","id","useRef","uniqueId","current","width","elementRef","useCalculatedWidth","dirty","setDirty","useState","focused","setFocused","isAutoHeight","useContent","isStretchHeight","inputHeight","textareaRef","uiValue","setUiValue","onFormCleared","useCallback","setValueWithSource","useBasicWidgetState","useUpdateUiValue","theme","useEmotionTheme","autoExpandHeight","maxHeight","autoExpandMaxHeight","updateScrollHeight","useTextInputAutoExpand","dependencies","placeholder","commitWidgetValue","onBlur","onFocus","additionalAction","onChange","useOnInputChange","formId","maxChars","onKeyDown","useSubmitFormViaEnterKey","allowEnterToSubmit","isInForm","allowFormEnterToSubmit","shouldShowInstructions","breakpoints","hideWidgetDetails","jsx","WidgetLabel","label","help","StyledWidgetLabelHelp","TooltipIcon","Placement","TOP_RIGHT","UITextArea","undefined","Input","style","fontWeight","fontWeights","normal","lineHeight","lineHeights","inputWidget","minHeight","sizes","largestElementHeight","resize","paddingRight","spacing","md","paddingLeft","paddingBottom","paddingTop","color","colors","fadedText60","Root","props","borderLeftWidth","borderWidth","borderRightWidth","borderTopWidth","borderBottomWidth","flexGrow","InputInstructions","TextArea$1","memo"],"mappings":"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"}