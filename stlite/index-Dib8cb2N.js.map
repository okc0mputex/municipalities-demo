{"version":3,"file":"index-Dib8cb2N.js","sources":["../../../streamlit/frontend/lib/src/components/widgets/Checkbox/Checkbox.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { memo, ReactElement, useCallback } from \"react\"\n\nimport {\n  LABEL_PLACEMENT,\n  STYLE_TYPE,\n  Checkbox as UICheckbox,\n} from \"baseui/checkbox\"\nimport { transparentize } from \"color2k\"\n\nimport { Checkbox as CheckboxProto } from \"@streamlit/protobuf\"\n\nimport StreamlitMarkdown from \"~lib/components/shared/StreamlitMarkdown\"\nimport { Placement } from \"~lib/components/shared/Tooltip\"\nimport TooltipIcon from \"~lib/components/shared/TooltipIcon\"\nimport { StyledWidgetLabelHelpInline } from \"~lib/components/widgets/BaseWidget\"\nimport {\n  useBasicWidgetState,\n  ValueWithSource,\n} from \"~lib/hooks/useBasicWidgetState\"\nimport { useEmotionTheme } from \"~lib/hooks/useEmotionTheme\"\nimport { hasLightBackgroundColor } from \"~lib/theme\"\nimport { labelVisibilityProtoValueToEnum } from \"~lib/util/utils\"\nimport { WidgetStateManager } from \"~lib/WidgetStateManager\"\n\nimport { StyledCheckbox, StyledContent } from \"./styled-components\"\n\nexport interface Props {\n  disabled: boolean\n  element: CheckboxProto\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n}\n\nfunction Checkbox({\n  element,\n  disabled,\n  widgetMgr,\n  fragmentId,\n}: Readonly<Props>): ReactElement {\n  const [value, setValueWithSource] = useBasicWidgetState<\n    boolean,\n    CheckboxProto\n  >({\n    getStateFromWidgetMgr,\n    getDefaultStateFromProto,\n    getCurrStateFromProto,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n  })\n\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>): void => {\n      setValueWithSource({ value: e.target.checked, fromUi: true })\n    },\n    // ESLint complains if we remove this unnecessary dep.\n    [setValueWithSource]\n  )\n\n  const theme = useEmotionTheme()\n  const { colors, spacing, sizes } = theme\n\n  const lightTheme = hasLightBackgroundColor(theme)\n\n  const color = disabled ? colors.fadedText40 : colors.bodyText\n\n  return (\n    <StyledCheckbox className=\"row-widget stCheckbox\" data-testid=\"stCheckbox\">\n      <UICheckbox\n        checked={value}\n        disabled={disabled}\n        onChange={onChange}\n        aria-label={element.label}\n        checkmarkType={\n          element.type === CheckboxProto.StyleType.TOGGLE\n            ? STYLE_TYPE.toggle\n            : STYLE_TYPE.default\n        }\n        labelPlacement={LABEL_PLACEMENT.right}\n        overrides={{\n          Root: {\n            style: ({ $isFocusVisible }: { $isFocusVisible: boolean }) => ({\n              marginBottom: spacing.none,\n              marginTop: spacing.none,\n              backgroundColor: $isFocusVisible ? colors.darkenedBgMix25 : \"\",\n              display: \"flex\",\n              alignItems: \"start\",\n            }),\n          },\n          Toggle: {\n            style: ({ $checked }: { $checked: boolean }) => {\n              let backgroundColor = lightTheme\n                ? colors.bgColor\n                : colors.bodyText\n\n              if (disabled) {\n                backgroundColor = lightTheme ? colors.gray70 : colors.gray90\n              }\n              return {\n                width: `calc(${sizes.checkbox} - ${theme.spacing.twoXS})`,\n                height: `calc(${sizes.checkbox} - ${theme.spacing.twoXS})`,\n                transform: $checked ? `translateX(${sizes.checkbox})` : \"\",\n                backgroundColor,\n                boxShadow: \"\",\n              }\n            },\n          },\n          ToggleTrack: {\n            style: ({\n              $checked,\n              $isHovered,\n            }: {\n              $checked: boolean\n              $isHovered: boolean\n            }) => {\n              let backgroundColor = colors.fadedText40\n\n              if ($isHovered && !disabled) {\n                backgroundColor = colors.fadedText20\n              }\n\n              if ($checked && !disabled) {\n                backgroundColor = colors.primary\n              }\n\n              return {\n                marginRight: 0,\n                marginLeft: 0,\n                marginBottom: 0,\n                marginTop: theme.spacing.twoXS,\n                paddingLeft: theme.spacing.threeXS,\n                paddingRight: theme.spacing.threeXS,\n                width: `calc(2 * ${sizes.checkbox})`,\n                minWidth: `calc(2 * ${sizes.checkbox})`,\n                height: sizes.checkbox,\n                minHeight: sizes.checkbox,\n                borderBottomLeftRadius: theme.radii.full,\n                borderTopLeftRadius: theme.radii.full,\n                borderBottomRightRadius: theme.radii.full,\n                borderTopRightRadius: theme.radii.full,\n                backgroundColor,\n              }\n            },\n          },\n          Checkmark: {\n            style: ({\n              $isFocusVisible,\n              $checked,\n            }: {\n              $isFocusVisible: boolean\n              $checked: boolean\n            }) => {\n              const borderColor =\n                $checked && !disabled ? colors.primary : colors.fadedText40\n\n              return {\n                outline: 0,\n                width: sizes.checkbox,\n                height: sizes.checkbox,\n                marginTop: theme.spacing.twoXS,\n                marginLeft: 0,\n                marginBottom: 0,\n                boxShadow:\n                  $isFocusVisible && $checked\n                    ? `0 0 0 0.2rem ${transparentize(colors.primary, 0.5)}`\n                    : \"\",\n                // This is painfully verbose, but baseweb seems to internally\n                // use the long-hand version, which means we can't use the\n                // shorthand names here as if we do we'll end up with warn\n                // logs spamming us every time a checkbox is rendered.\n                borderLeftWidth: sizes.borderWidth,\n                borderRightWidth: sizes.borderWidth,\n                borderTopWidth: sizes.borderWidth,\n                borderBottomWidth: sizes.borderWidth,\n                borderLeftColor: borderColor,\n                borderRightColor: borderColor,\n                borderTopColor: borderColor,\n                borderBottomColor: borderColor,\n              }\n            },\n          },\n          Label: {\n            style: {\n              lineHeight: theme.lineHeights.small,\n              paddingLeft: theme.spacing.sm,\n              position: \"relative\",\n              color,\n            },\n          },\n        }}\n      >\n        <StyledContent\n          visibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n          data-testid=\"stWidgetLabel\"\n        >\n          <StreamlitMarkdown\n            source={element.label}\n            allowHTML={false}\n            isLabel\n            largerLabel\n          />\n          {element.help && (\n            <StyledWidgetLabelHelpInline color={color}>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelpInline>\n          )}\n        </StyledContent>\n      </UICheckbox>\n    </StyledCheckbox>\n  )\n}\n\nfunction getStateFromWidgetMgr(\n  widgetMgr: WidgetStateManager,\n  element: CheckboxProto\n): boolean | undefined {\n  return widgetMgr.getBoolValue(element)\n}\n\nfunction getDefaultStateFromProto(element: CheckboxProto): boolean {\n  return element.default ?? null\n}\n\nfunction getCurrStateFromProto(element: CheckboxProto): boolean {\n  return element.value ?? null\n}\n\nfunction updateWidgetMgrState(\n  element: CheckboxProto,\n  widgetMgr: WidgetStateManager,\n  vws: ValueWithSource<boolean>,\n  fragmentId?: string\n): void {\n  widgetMgr.setBoolValue(\n    element,\n    vws.value,\n    { fromUi: vws.fromUi },\n    fragmentId\n  )\n}\n\nexport default memo(Checkbox)\n"],"names":["Checkbox","element","disabled","widgetMgr","fragmentId","value","setValueWithSource","useBasicWidgetState","getStateFromWidgetMgr","getDefaultStateFromProto","getCurrStateFromProto","updateWidgetMgrState","onChange","useCallback","e","target","checked","fromUi","theme","useEmotionTheme","colors","spacing","sizes","lightTheme","hasLightBackgroundColor","color","fadedText40","bodyText","jsx","StyledCheckbox","UICheckbox","label","type","CheckboxProto","StyleType","TOGGLE","STYLE_TYPE","toggle","default","LABEL_PLACEMENT","right","Root","style","$isFocusVisible","marginBottom","none","marginTop","backgroundColor","darkenedBgMix25","display","alignItems","Toggle","$checked","bgColor","gray70","gray90","width","checkbox","twoXS","height","transform","boxShadow","ToggleTrack","$isHovered","fadedText20","primary","marginRight","marginLeft","paddingLeft","threeXS","paddingRight","minWidth","minHeight","borderBottomLeftRadius","radii","full","borderTopLeftRadius","borderBottomRightRadius","borderTopRightRadius","Checkmark","borderColor","outline","transparentize","borderLeftWidth","borderWidth","borderRightWidth","borderTopWidth","borderBottomWidth","borderLeftColor","borderRightColor","borderTopColor","borderBottomColor","Label","lineHeight","lineHeights","small","sm","position","jsxs","StyledContent","labelVisibilityProtoValueToEnum","labelVisibility","StreamlitMarkdown","help","StyledWidgetLabelHelpInline","TooltipIcon","Placement","TOP_RIGHT","getBoolValue","vws","setBoolValue","Checkbox$1","memo"],"mappings":"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"}