{"version":3,"file":"sprintf-CQZ7AWXD.js","sources":["../../../node_modules/sprintf-js/src/sprintf.js"],"sourcesContent":["/* global window, exports, define */\n\n!function() {\n    'use strict'\n\n    var re = {\n        not_string: /[^s]/,\n        not_bool: /[^t]/,\n        not_type: /[^T]/,\n        not_primitive: /[^v]/,\n        number: /[diefg]/,\n        numeric_arg: /[bcdiefguxX]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[+-]/\n    }\n\n    function sprintf(key) {\n        // `arguments` is not an array, but should be fine for this call\n        return sprintf_format(sprintf_parse(key), arguments)\n    }\n\n    function vsprintf(fmt, argv) {\n        return sprintf.apply(null, [fmt].concat(argv || []))\n    }\n\n    function sprintf_format(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign\n        for (i = 0; i < tree_length; i++) {\n            if (typeof parse_tree[i] === 'string') {\n                output += parse_tree[i]\n            }\n            else if (typeof parse_tree[i] === 'object') {\n                ph = parse_tree[i] // convenience purposes only\n                if (ph.keys) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < ph.keys.length; k++) {\n                        if (arg == undefined) {\n                            throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k-1]))\n                        }\n                        arg = arg[ph.keys[k]]\n                    }\n                }\n                else if (ph.param_no) { // positional argument (explicit)\n                    arg = argv[ph.param_no]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n                    arg = arg()\n                }\n\n                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {\n                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\n                }\n\n                if (re.number.test(ph.type)) {\n                    is_positive = arg >= 0\n                }\n\n                switch (ph.type) {\n                    case 'b':\n                        arg = parseInt(arg, 10).toString(2)\n                        break\n                    case 'c':\n                        arg = String.fromCharCode(parseInt(arg, 10))\n                        break\n                    case 'd':\n                    case 'i':\n                        arg = parseInt(arg, 10)\n                        break\n                    case 'j':\n                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)\n                        break\n                    case 'e':\n                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()\n                        break\n                    case 'f':\n                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)\n                        break\n                    case 'g':\n                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)\n                        break\n                    case 'o':\n                        arg = (parseInt(arg, 10) >>> 0).toString(8)\n                        break\n                    case 's':\n                        arg = String(arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 't':\n                        arg = String(!!arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'T':\n                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'u':\n                        arg = parseInt(arg, 10) >>> 0\n                        break\n                    case 'v':\n                        arg = arg.valueOf()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'x':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16)\n                        break\n                    case 'X':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\n                        break\n                }\n                if (re.json.test(ph.type)) {\n                    output += arg\n                }\n                else {\n                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n                        sign = is_positive ? '+' : '-'\n                        arg = arg.toString().replace(re.sign, '')\n                    }\n                    else {\n                        sign = ''\n                    }\n                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '\n                    pad_length = ph.width - (sign + arg).length\n                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\n                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output\n    }\n\n    var sprintf_cache = Object.create(null)\n\n    function sprintf_parse(fmt) {\n        if (sprintf_cache[fmt]) {\n            return sprintf_cache[fmt]\n        }\n\n        var _fmt = fmt, match, parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree.push(match[0])\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree.push('%')\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1])\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else {\n                                throw new SyntaxError('[sprintf] failed to parse named argument key')\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError('[sprintf] failed to parse named argument key')\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\n                }\n\n                parse_tree.push(\n                    {\n                        placeholder: match[0],\n                        param_no:    match[1],\n                        keys:        match[2],\n                        sign:        match[3],\n                        pad_char:    match[4],\n                        align:       match[5],\n                        width:       match[6],\n                        precision:   match[7],\n                        type:        match[8]\n                    }\n                )\n            }\n            else {\n                throw new SyntaxError('[sprintf] unexpected placeholder')\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return sprintf_cache[fmt] = parse_tree\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    /* eslint-disable quote-props */\n    if (typeof exports !== 'undefined') {\n        exports['sprintf'] = sprintf\n        exports['vsprintf'] = vsprintf\n    }\n    if (typeof window !== 'undefined') {\n        window['sprintf'] = sprintf\n        window['vsprintf'] = vsprintf\n\n        if (typeof define === 'function' && define['amd']) {\n            define(function() {\n                return {\n                    'sprintf': sprintf,\n                    'vsprintf': vsprintf\n                }\n            })\n        }\n    }\n    /* eslint-enable quote-props */\n}(); // eslint-disable-line\n"],"names":["re","sprintf","key","sprintf_format","sprintf_parse","vsprintf","fmt","argv","parse_tree","cursor","tree_length","arg","output","i","k","ph","pad","pad_character","pad_length","is_positive","sign","sprintf_cache","_fmt","match","arg_names","field_list","replacement_field","field_match","exports"],"mappings":"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","x_google_ignoreList":[0]}