{"version":3,"file":"index-ZP9Fycfm.js","sources":["../../../streamlit/frontend/lib/src/components/widgets/Selectbox/Selectbox.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { FC, memo, useCallback } from \"react\"\n\nimport { Selectbox as SelectboxProto } from \"@streamlit/protobuf\"\n\nimport UISelectbox from \"~lib/components/shared/Dropdown\"\nimport {\n  useBasicWidgetState,\n  ValueWithSource,\n} from \"~lib/hooks/useBasicWidgetState\"\nimport {\n  isNullOrUndefined,\n  labelVisibilityProtoValueToEnum,\n} from \"~lib/util/utils\"\nimport { WidgetStateManager } from \"~lib/WidgetStateManager\"\n\nexport interface Props {\n  disabled: boolean\n  element: SelectboxProto\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n}\n\n/**\n * The value specified by the user via the UI. If the user didn't touch this\n * widget's UI, the default value is used.\n */\ntype SelectboxValue = string | null\n\nconst getStateFromWidgetMgr = (\n  widgetMgr: WidgetStateManager,\n  element: SelectboxProto\n): SelectboxValue | undefined => {\n  return widgetMgr.getStringValue(element)\n}\n\nconst getDefaultStateFromProto = (element: SelectboxProto): SelectboxValue => {\n  if (element.options.length === 0 || isNullOrUndefined(element.default)) {\n    return null\n  }\n  return element.options[element.default]\n}\n\nconst getCurrStateFromProto = (element: SelectboxProto): SelectboxValue => {\n  return element.rawValue ?? null\n}\n\nconst updateWidgetMgrState = (\n  element: SelectboxProto,\n  widgetMgr: WidgetStateManager,\n  valueWithSource: ValueWithSource<SelectboxValue>,\n  fragmentId?: string\n): void => {\n  widgetMgr.setStringValue(\n    element,\n    valueWithSource.value,\n    { fromUi: valueWithSource.fromUi },\n    fragmentId\n  )\n}\n\nconst Selectbox: FC<Props> = ({\n  disabled,\n  element,\n  widgetMgr,\n  fragmentId,\n}) => {\n  const {\n    options,\n    help,\n    label,\n    labelVisibility,\n    placeholder,\n    acceptNewOptions,\n  } = element\n  const [value, setValueWithSource] = useBasicWidgetState<\n    SelectboxValue,\n    SelectboxProto\n  >({\n    getStateFromWidgetMgr,\n    getDefaultStateFromProto,\n    getCurrStateFromProto,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n  })\n\n  const onChange = useCallback(\n    (valueArg: SelectboxValue) => {\n      setValueWithSource({ value: valueArg, fromUi: true })\n    },\n    [setValueWithSource]\n  )\n\n  const clearable = isNullOrUndefined(element.default) && !disabled\n\n  return (\n    <UISelectbox\n      label={label}\n      labelVisibility={labelVisibilityProtoValueToEnum(labelVisibility?.value)}\n      options={options}\n      disabled={disabled}\n      onChange={onChange}\n      value={value}\n      help={help}\n      placeholder={placeholder}\n      clearable={clearable}\n      acceptNewOptions={acceptNewOptions ?? false}\n    />\n  )\n}\n\nexport default memo(Selectbox)\n"],"names":["getStateFromWidgetMgr","widgetMgr","element","getStringValue","getDefaultStateFromProto","options","length","isNullOrUndefined","default","getCurrStateFromProto","rawValue","updateWidgetMgrState","valueWithSource","fragmentId","setStringValue","value","fromUi","Selectbox","disabled","help","label","labelVisibility","placeholder","acceptNewOptions","setValueWithSource","useBasicWidgetState","onChange","useCallback","valueArg","clearable","UISelectbox","labelVisibilityProtoValueToEnum","Selectbox$1","memo"],"mappings":";;AA4CA,MAAMA,IAAwBA,CAC5BC,GACAC,MAEOD,EAAUE,eAAeD,CAAO,GAGnCE,IAA2BA,CAACF,MAC5BA,EAAQG,QAAQC,WAAW,KAAKC,EAAkBL,EAAQM,OAAO,IAC5D,OAEFN,EAAQG,QAAQH,EAAQM,OAAO,GAGlCC,IAAwBA,CAACP,MACtBA,EAAQQ,YAAY,MAGvBC,IAAuBA,CAC3BT,GACAD,GACAW,GACAC,MACS;AACTZ,EAAAA,EAAUa,eACRZ,GACAU,EAAgBG,OAChB;AAAA,IAAEC,QAAQJ,EAAgBI;AAAAA,EAAAA,GAC1BH,CACF;AACF,GAEMI,IAAuBA,CAAC;AAAA,EAC5BC,UAAAA;AAAAA,EACAhB,SAAAA;AAAAA,EACAD,WAAAA;AAAAA,EACAY,YAAAA;AACF,MAAM;AACJ,QAAM;AAAA,IACJR,SAAAA;AAAAA,IACAc,MAAAA;AAAAA,IACAC,OAAAA;AAAAA,IACAC,iBAAAA;AAAAA,IACAC,aAAAA;AAAAA,IACAC,kBAAAA;AAAAA,EAAAA,IACErB,GACE,CAACa,GAAOS,CAAkB,IAAIC,EAGlC;AAAA,IACAzB,uBAAAA;AAAAA,IACAI,0BAAAA;AAAAA,IACAK,uBAAAA;AAAAA,IACAE,sBAAAA;AAAAA,IACAT,SAAAA;AAAAA,IACAD,WAAAA;AAAAA,IACAY,YAAAA;AAAAA,EAAAA,CACD,GAEKa,IAAWC,cACf,CAACC,MAA6B;AAC5BJ,IAAAA,EAAmB;AAAA,MAAET,OAAOa;AAAAA,MAAUZ,QAAQ;AAAA,IAAA,CAAM;AAAA,EACtD,GACA,CAACQ,CAAkB,CACrB,GAEMK,IAAYtB,EAAkBL,EAAQM,OAAO,KAAK,CAACU;AAEzD,+BACGY,GAAA,EACC,OAAAV,GACA,iBAAiBW,EAAgCV,GAAiBN,KAAK,GACvE,SAAAV,GACA,UAAAa,GACA,UAAAQ,GACA,OAAAX,GACA,MAAAI,GACA,aAAAG,GACA,WAAAO,GACA,kBAAkBN,KAAoB,IAAM;AAGlD,GAEAS,IAAeC,EAAAA,KAAKhB,CAAS;"}