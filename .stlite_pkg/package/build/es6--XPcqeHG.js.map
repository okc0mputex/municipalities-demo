{"version":3,"file":"es6--XPcqeHG.js","sources":["../../../node_modules/native-file-system-adapter/src/showDirectoryPicker.js","../../../node_modules/native-file-system-adapter/src/showOpenFilePicker.js","../../../node_modules/native-file-system-adapter/src/showSaveFilePicker.js","../../../node_modules/native-file-system-adapter/src/getOriginPrivateDirectory.js","../../../node_modules/native-file-system-adapter/src/config.js","../../../node_modules/native-file-system-adapter/src/FileSystemWritableFileStream.js","../../../node_modules/native-file-system-adapter/src/FileSystemHandle.js","../../../node_modules/native-file-system-adapter/src/util.js","../../../node_modules/native-file-system-adapter/src/FileSystemDirectoryHandle.js","../../../node_modules/native-file-system-adapter/src/FileSystemFileHandle.js"],"sourcesContent":["/** @typedef {import('./FileSystemDirectoryHandle.js').default} FileSystemDirectoryHandle */\n\nconst native = globalThis.showDirectoryPicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @returns {Promise<FileSystemDirectoryHandle>}\n */\nasync function showDirectoryPicker (options = {}) {\n  if (native && !options._preferPolyfill) {\n    return native(options)\n  }\n\n  const input = document.createElement('input')\n  input.type = 'file'\n  input.webkitdirectory = true\n  // Fallback to multiple files input for iOS Safari\n  input.multiple = true\n\n  // See https://stackoverflow.com/questions/47664777/javascript-file-input-onchange-not-working-ios-safari-only\n  input.style.position = 'fixed'\n  input.style.top = '-100000px'\n  input.style.left = '-100000px'\n  document.body.appendChild(input)\n\n  // Lazy load while the user is choosing the directory\n  const p = import('./util.js')\n\n  await new Promise(resolve => {\n    input.addEventListener('change', resolve)\n    input.click()\n  })\n\n  return p.then(mod => mod.getDirHandlesFromInput(input))\n}\n\nexport default showDirectoryPicker\nexport { showDirectoryPicker }\n","/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\n\nconst def = { accepts: [] }\nconst native = globalThis.showOpenFilePicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options.multiple] If you want to allow more than one file\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.accepts] Files you want to accept\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @returns {Promise<FileSystemFileHandle[]>}\n */\nasync function showOpenFilePicker (options = {}) {\n  const opts = { ...def, ...options }\n\n  if (native && !options._preferPolyfill) {\n    return native(opts)\n  }\n\n  const input = document.createElement('input')\n  input.type = 'file'\n  input.multiple = opts.multiple\n  input.accept = (opts.accepts || [])\n    .map(e => [\n      ...(e.extensions || []).map(e => '.' + e),\n      ...e.mimeTypes || []]\n    )\n    .flat()\n    .join(',')\n\n  // See https://stackoverflow.com/questions/47664777/javascript-file-input-onchange-not-working-ios-safari-only\n  Object.assign(input.style, {\n    position: 'fixed',\n    top: '-100000px',\n    left: '-100000px'\n  })\n\n  document.body.appendChild(input)\n\n  // Lazy load while the user is choosing the directory\n  const p = import('./util.js')\n\n  await new Promise(resolve => {\n    input.addEventListener('change', resolve, { once: true })\n    input.click()\n  })\n  input.remove()\n\n  return p.then(m => m.getFileHandlesFromInput(input))\n}\n\nexport default showOpenFilePicker\nexport { showOpenFilePicker }\n","/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\n\nconst native = globalThis.showSaveFilePicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.types] Files you want to accept\n * @param {string} [options.suggestedName] the name to fall back to when using polyfill\n * @param {string} [options._name] the name to fall back to when using polyfill\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @return {Promise<FileSystemFileHandle>}\n */\nasync function showSaveFilePicker (options = {}) {\n  if (native && !options._preferPolyfill) {\n    return native(options)\n  }\n\n  if (options._name) {\n    console.warn('deprecated _name, spec now have `suggestedName`')\n    options.suggestedName = options._name\n  }\n\n  const { FileSystemFileHandle } = await import('./FileSystemFileHandle.js')\n  const { FileHandle } = await import('./adapters/downloader.js')\n  return new FileSystemFileHandle(new FileHandle(options.suggestedName))\n}\n\nexport default showSaveFilePicker\nexport { showSaveFilePicker }\n","/** @typedef {import('./FileSystemDirectoryHandle.js').default} FileSystemDirectoryHandle */\n\nif (globalThis.DataTransferItem && !DataTransferItem.prototype.getAsFileSystemHandle) {\n  DataTransferItem.prototype.getAsFileSystemHandle = async function () {\n    const entry = this.webkitGetAsEntry()\n    const [\n      { FileHandle, FolderHandle },\n      { FileSystemDirectoryHandle },\n      { FileSystemFileHandle }\n    ] = await Promise.all([\n      import('./adapters/sandbox.js'),\n      import('./FileSystemDirectoryHandle.js'),\n      import('./FileSystemFileHandle.js')\n    ])\n\n    return entry.isFile\n      ? new FileSystemFileHandle(new FileHandle(entry, false))\n      : new FileSystemDirectoryHandle(new FolderHandle(entry, false))\n  }\n}\n\n/**\n * @param {object=} driver\n * @return {Promise<FileSystemDirectoryHandle>}\n */\nasync function getOriginPrivateDirectory (driver, options = {}) {\n  if (!driver) {\n    return globalThis.navigator?.storage?.getDirectory() || globalThis.getOriginPrivateDirectory()\n  }\n  const {FileSystemDirectoryHandle} = await import('./FileSystemDirectoryHandle.js')\n  const module = await driver\n  const sandbox = await (module.default\n    ? module.default(options)\n    : module(options)\n  )\n  return new FileSystemDirectoryHandle(sandbox)\n}\n\nexport default getOriginPrivateDirectory\n","const config = {\n  ReadableStream: globalThis.ReadableStream,\n  WritableStream: globalThis.WritableStream,\n  TransformStream: globalThis.TransformStream,\n  DOMException: globalThis.DOMException,\n  Blob: globalThis.Blob,\n  File: globalThis.File,\n}\n\nexport default config\n","import config from './config.js'\n\nconst { WritableStream } = config\n\nclass FileSystemWritableFileStream extends WritableStream {\n  #writer\n  constructor (writer) {\n    super(writer)\n    this.#writer = writer\n    // Stupid Safari hack to extend native classes\n    // https://bugs.webkit.org/show_bug.cgi?id=226201\n    Object.setPrototypeOf(this, FileSystemWritableFileStream.prototype)\n\n    /** @private */\n    this._closed = false\n  }\n\n  async close () {\n    this._closed = true\n    const w = this.getWriter()\n    const p = w.close()\n    w.releaseLock()\n    return p\n    // return super.close ? super.close() : this.getWriter().close()\n  }\n\n  /** @param {number} position */\n  seek (position) {\n    return this.write({ type: 'seek', position })\n  }\n\n  /** @param {number} size */\n  truncate (size) {\n    return this.write({ type: 'truncate', size })\n  }\n\n  // The write(data) method steps are:\n  write (data) {\n    if (this._closed) {\n      return Promise.reject(new TypeError('Cannot write to a CLOSED writable stream'))\n    }\n\n    // 1. Let writer be the result of getting a writer for this.\n    const writer = this.getWriter()\n\n    // 2. Let result be the result of writing a chunk to writer given data.\n    const result = writer.write(data)\n\n    // 3. Release writer.\n    writer.releaseLock()\n\n    // 4. Return result.\n    return result\n  }\n}\n\nObject.defineProperty(FileSystemWritableFileStream.prototype, Symbol.toStringTag, {\n  value: 'FileSystemWritableFileStream',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nObject.defineProperties(FileSystemWritableFileStream.prototype, {\n  close: { enumerable: true },\n  seek: { enumerable: true },\n  truncate: { enumerable: true },\n  write: { enumerable: true }\n})\n\n// Safari safari doesn't support writable streams yet.\nif (\n  globalThis.FileSystemFileHandle &&\n  !globalThis.FileSystemFileHandle.prototype.createWritable &&\n  !globalThis.FileSystemWritableFileStream\n) {\n  globalThis.FileSystemWritableFileStream = FileSystemWritableFileStream\n}\n\nexport default FileSystemWritableFileStream\nexport { FileSystemWritableFileStream }\n","const kAdapter = Symbol('adapter')\n\n/**\n * @typedef {Object} FileSystemHandlePermissionDescriptor\n * @property {('read'|'readwrite')} [mode='read']\n */\nclass FileSystemHandle {\n  /** @type {FileSystemHandle} */\n  [kAdapter]\n\n  /** @type {string} */\n  name\n  /** @type {('file'|'directory')} */\n  kind\n\n  /** @param {FileSystemHandle & {writable}} adapter */\n  constructor (adapter) {\n    this.kind = adapter.kind\n    this.name = adapter.name\n    this[kAdapter] = adapter\n  }\n\n  /** @param {FileSystemHandlePermissionDescriptor} descriptor */\n  async queryPermission (descriptor = {}) {\n    const { mode = 'read' } = descriptor\n    const handle = this[kAdapter]\n\n    if (handle.queryPermission) {\n      return handle.queryPermission({mode})\n    }\n\n    if (mode === 'read') {\n      return 'granted'\n    } else if (mode === 'readwrite') {\n      return handle.writable ? 'granted' : 'denied'\n    } else {\n      throw new TypeError(`Mode ${mode} must be 'read' or 'readwrite'`)\n    }\n  }\n\n  async requestPermission ({mode = 'read'} = {}) {\n    const handle = this[kAdapter]\n    if (handle.requestPermission) {\n      return handle.requestPermission({mode})\n    }\n\n    if (mode === 'read') {\n      return 'granted'\n    } else if (mode === 'readwrite') {\n      return handle.writable ? 'granted' : 'denied'\n    } else {\n      throw new TypeError(`Mode ${mode} must be 'read' or 'readwrite'`)\n    }\n  }\n\n  /**\n   * Attempts to remove the entry represented by handle from the underlying file system.\n   *\n   * @param {object} options\n   * @param {boolean} [options.recursive=false]\n   */\n  async remove (options = {}) {\n    await this[kAdapter].remove(options)\n  }\n\n  /**\n   * @param {FileSystemHandle} other\n   */\n  async isSameEntry (other) {\n    if (this === other) return true\n    if (\n      (!other) ||\n      (typeof other !== 'object') ||\n      (this.kind !== other.kind) ||\n      (!other[kAdapter])\n    ) return false\n    return this[kAdapter].isSameEntry(other[kAdapter])\n  }\n}\n\nObject.defineProperty(FileSystemHandle.prototype, Symbol.toStringTag, {\n  value: 'FileSystemHandle',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\n// Safari safari doesn't support writable streams yet.\nif (globalThis.FileSystemHandle) {\n  globalThis.FileSystemHandle.prototype.queryPermission ??= function (descriptor) {\n    return 'granted'\n  }\n}\n\nexport default FileSystemHandle\nexport { FileSystemHandle }\n","export const errors = {\n  INVALID: ['seeking position failed.', 'InvalidStateError'],\n  GONE: ['A requested file or directory could not be found at the time an operation was processed.', 'NotFoundError'],\n  MISMATCH: ['The path supplied exists, but was not an entry of requested type.', 'TypeMismatchError'],\n  MOD_ERR: ['The object can not be modified in this way.', 'InvalidModificationError'],\n  SYNTAX: m => [`Failed to execute 'write' on 'UnderlyingSinkBase': Invalid params passed. ${m}`, 'SyntaxError'],\n  SECURITY: ['It was determined that certain files are unsafe for access within a Web application, or that too many calls are being made on file resources.', 'SecurityError'],\n  DISALLOWED: ['The request is not allowed by the user agent or the platform in the current context.', 'NotAllowedError']\n}\n\nexport const config = {\n  writable: globalThis.WritableStream\n}\n\nexport async function fromDataTransfer (entries) {\n  console.warn('deprecated fromDataTransfer - use `dt.items[0].getAsFileSystemHandle()` instead')\n  const [memory, sandbox, fs] = await Promise.all([\n    import('./adapters/memory.js'),\n    import('./adapters/sandbox.js'),\n    import('./FileSystemDirectoryHandle.js')\n  ])\n\n  const folder = new memory.FolderHandle('', false)\n  folder._entries = entries.map(entry => entry.isFile\n    ? new sandbox.FileHandle(entry, false)\n    : new sandbox.FolderHandle(entry, false)\n  )\n\n  return new fs.FileSystemDirectoryHandle(folder)\n}\n\nexport async function getDirHandlesFromInput (input) {\n  const { FolderHandle, FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemDirectoryHandle } = await import('./FileSystemDirectoryHandle.js')\n\n  const files = Array.from(input.files)\n  const rootName = files[0].webkitRelativePath.split('/', 1)[0]\n  const root = new FolderHandle(rootName, false)\n\n  files.forEach(file => {\n    const path = file.webkitRelativePath.split('/')\n    path.shift()\n    const name = path.pop()\n\n    const dir = path.reduce((dir, path) => {\n      if (!dir._entries[path]) dir._entries[path] = new FolderHandle(path, false)\n      return dir._entries[path]\n    }, root)\n\n    dir._entries[name] = new FileHandle(file.name, file, false)\n  })\n\n  return new FileSystemDirectoryHandle(root)\n}\n\nexport async function getFileHandlesFromInput (input) {\n  const { FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemFileHandle } = await import('./FileSystemFileHandle.js')\n\n  return Array.from(input.files).map(file =>\n    new FileSystemFileHandle(new FileHandle(file.name, file, false))\n  )\n}\n","import FileSystemHandle from './FileSystemHandle.js'\nimport { errors } from './util.js'\n\nconst { GONE, MOD_ERR } = errors\n\nconst kAdapter = Symbol('adapter')\n\nclass FileSystemDirectoryHandle extends FileSystemHandle {\n  /** @type {FileSystemDirectoryHandle} */\n  [kAdapter]\n\n  constructor (adapter) {\n    super(adapter)\n    this[kAdapter] = adapter\n  }\n\n  /**\n   * @param {string} name Name of the directory\n   * @param {object} [options]\n   * @param {boolean} [options.create] create the directory if don't exist\n   * @returns {Promise<FileSystemDirectoryHandle>}\n   */\n  async getDirectoryHandle (name, options = {}) {\n    if (name === '') {\n      throw new TypeError(`Name can't be an empty string.`)\n    }\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.create = !!options.create\n    const handle = await this[kAdapter].getDirectoryHandle(name, options)\n    return new FileSystemDirectoryHandle(handle)\n  }\n\n  /** @returns {AsyncGenerator<[string, FileSystemHandle | FileSystemDirectoryHandle]>} */\n  async * entries () {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n\n    for await (const [_, entry] of this[kAdapter].entries())\n      yield [entry.name, entry.kind === 'file'\n        ? new FileSystemFileHandle(entry)\n        : new FileSystemDirectoryHandle(entry)]\n  }\n\n  /** @deprecated use .entries() instead */\n  async * getEntries() {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n    console.warn('deprecated, use .entries() instead')\n    for await (let entry of this[kAdapter].entries())\n      yield entry.kind === 'file'\n        ? new FileSystemFileHandle(entry)\n        : new FileSystemDirectoryHandle(entry)\n  }\n\n  /**\n   * @param {string} name Name of the file\n   * @param {object} [options]\n   * @param {boolean} [options.create] create the file if don't exist\n   */\n  async getFileHandle (name, options = {}) {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n    if (name === '') throw new TypeError(`Name can't be an empty string.`)\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.create = !!options.create\n    const handle = await this[kAdapter].getFileHandle(name, options)\n    return new FileSystemFileHandle(handle)\n  }\n\n  /**\n   * @param {string} name\n   * @param {object} [options]\n   * @param {boolean} [options.recursive]\n   */\n  async removeEntry (name, options = {}) {\n    if (name === '') {\n      throw new TypeError(`Name can't be an empty string.`)\n    }\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.recursive = !!options.recursive // cuz node's fs.rm require boolean\n    return this[kAdapter].removeEntry(name, options)\n  }\n\n  async resolve (possibleDescendant) {\n    if (await possibleDescendant.isSameEntry(this)) {\n      return []\n    }\n\n    const openSet = [{ handle: this, path: [] }]\n\n    while (openSet.length) {\n      let { handle: current, path } = openSet.pop()\n\n      for await (const entry of current.values()) {\n        if (await entry.isSameEntry(possibleDescendant)) {\n          return [...path, entry.name]\n        }\n        if (entry.kind === 'directory') {\n          openSet.push({ handle: entry, path: [...path, entry.name] })\n        }\n      }\n    }\n\n    return null\n  }\n\n  async * keys () {\n    for await (const [name] of this[kAdapter].entries())\n      yield name\n  }\n\n  async * values () {\n    for await (const [_, entry] of this)\n      yield entry\n  }\n\n  [Symbol.asyncIterator]() {\n    return this.entries()\n  }\n}\n\nObject.defineProperty(FileSystemDirectoryHandle.prototype, Symbol.toStringTag, {\n\tvalue: 'FileSystemDirectoryHandle',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n})\n\nObject.defineProperties(FileSystemDirectoryHandle.prototype, {\n\tgetDirectoryHandle: { enumerable: true },\n\tentries: { enumerable: true },\n\tgetFileHandle: { enumerable: true },\n\tremoveEntry: { enumerable: true }\n})\n\nif (globalThis.FileSystemDirectoryHandle) {\n  const proto = globalThis.FileSystemDirectoryHandle.prototype\n\n  proto.resolve = async function resolve (possibleDescendant) {\n    if (await possibleDescendant.isSameEntry(this)) {\n      return []\n    }\n\n    const openSet = [{ handle: this, path: [] }]\n\n    while (openSet.length) {\n      let { handle: current, path } = openSet.pop()\n\n      for await (const entry of current.values()) {\n        if (await entry.isSameEntry(possibleDescendant)) {\n          return [...path, entry.name]\n        }\n        if (entry.kind === 'directory') {\n          openSet.push({ handle: entry, path: [...path, entry.name] })\n        }\n      }\n    }\n\n    return null\n  }\n\n  // Safari allows us operate on deleted files,\n  // so we need to check if they still exist.\n  // Hope to remove this one day.\n  async function ensureDoActuallyStillExist (handle) {\n    const root = await navigator.storage.getDirectory()\n    const path = await root.resolve(handle)\n    if (path === null) { throw new DOMException(...GONE) }\n  }\n\n  const entries = proto.entries\n  proto.entries = async function * () {\n    await ensureDoActuallyStillExist(this)\n    yield * entries.call(this)\n  }\n  proto[Symbol.asyncIterator] = async function * () {\n    yield * this.entries()\n  }\n\n  const removeEntry = proto.removeEntry\n  proto.removeEntry = async function (name, options = {}) {\n    return removeEntry.call(this, name, options).catch(async err => {\n      const unknown = err instanceof DOMException && err.name === 'UnknownError'\n      if (unknown && !options.recursive) {\n        const empty = (await entries.call(this).next()).done\n        if (!empty) { throw new DOMException(...MOD_ERR) }\n      }\n      throw err\n    })\n  }\n}\n\nexport default FileSystemDirectoryHandle\nexport { FileSystemDirectoryHandle }\n","import FileSystemHandle from './FileSystemHandle.js'\nimport FileSystemWritableFileStream from './FileSystemWritableFileStream.js'\nimport { errors } from './util.js'\n\nconst { INVALID, SYNTAX, GONE } = errors\n\nconst kAdapter = Symbol('adapter')\n\nclass FileSystemFileHandle extends FileSystemHandle {\n  /** @type {FileSystemFileHandle} */\n  [kAdapter]\n\n  constructor (adapter) {\n    super(adapter)\n    this[kAdapter] = adapter\n  }\n\n  /**\n   * @param  {Object} [options={}]\n   * @param  {boolean} [options.keepExistingData]\n   * @returns {Promise<FileSystemWritableFileStream>}\n   */\n  async createWritable (options = {}) {\n    return new FileSystemWritableFileStream(\n      await this[kAdapter].createWritable(options)\n    )\n  }\n\n  /**\n   * @returns {Promise<File>}\n   */\n  async getFile () {\n    return this[kAdapter].getFile()\n  }\n}\n\nObject.defineProperty(FileSystemFileHandle.prototype, Symbol.toStringTag, {\n  value: 'FileSystemFileHandle',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nObject.defineProperties(FileSystemFileHandle.prototype, {\n  createWritable: { enumerable: true },\n  getFile: { enumerable: true }\n})\n\n// Safari doesn't support async createWritable streams yet.\nif (\n  globalThis.FileSystemFileHandle &&\n  !globalThis.FileSystemFileHandle.prototype.createWritable\n) {\n  const wm = new WeakMap()\n\n  let workerUrl\n\n  // Worker code that should be inlined (can't use any external functions)\n  const code = () => {\n    let fileHandle, handle\n\n    onmessage = async evt => {\n      const port = evt.ports[0]\n      const cmd = evt.data\n      switch (cmd.type) {\n        case 'open':\n          const file = cmd.name\n\n          let dir = await navigator.storage.getDirectory()\n\n          for (const folder of cmd.path) {\n            dir = await dir.getDirectoryHandle(folder)\n          }\n\n          fileHandle = await dir.getFileHandle(file)\n          handle = await fileHandle.createSyncAccessHandle()\n          break\n        case 'write':\n          handle.write(cmd.data, { at: cmd.position })\n          handle.flush()\n          break\n        case 'truncate':\n          handle.truncate(cmd.size)\n          break\n        case 'abort':\n        case 'close':\n          handle.close()\n          break\n      }\n\n      port.postMessage(0)\n    }\n  }\n\n\n  globalThis.FileSystemFileHandle.prototype.createWritable = async function (options) {\n    // Safari only support writing data in a worker with sync access handle.\n    if (!workerUrl) {\n      const stringCode = `(${code.toString()})()`\n      const blob = new Blob([stringCode], {\n        type: 'text/javascript'\n      })\n      workerUrl = URL.createObjectURL(blob)\n    }\n    const worker = new Worker(workerUrl, { type: 'module' })\n\n    let position = 0\n    const textEncoder = new TextEncoder()\n    let size = await this.getFile().then(file => file.size)\n\n    const send = message => new Promise((resolve, reject) => {\n      const mc = new MessageChannel()\n      mc.port1.onmessage = evt => {\n        if (evt.data instanceof Error) reject(evt.data)\n        else resolve(evt.data)\n        mc.port1.close()\n        mc.port2.close()\n        mc.port1.onmessage = null\n      }\n      worker.postMessage(message, [mc.port2])\n    })\n\n    // Safari also don't support transferable file system handles.\n    // So we need to pass the path to the worker. This is a bit hacky and ugly.\n    const root = await navigator.storage.getDirectory()\n    const parent = await wm.get(this)\n    const path = await root.resolve(parent)\n\n    // Should likely never happen, but just in case...\n    if (path === null) throw new DOMException(...GONE)\n\n    let controller\n    await send({ type: 'open', path, name: this.name })\n\n    if (options?.keepExistingData === false) {\n      await send({ type: 'truncate', size: 0 })\n      size = 0\n    }\n\n    const ws = new FileSystemWritableFileStream({\n      start: ctrl => {\n        controller = ctrl\n      },\n      async write(chunk) {\n        const isPlainObject = chunk?.constructor === Object\n\n        if (isPlainObject) {\n          chunk = { ...chunk }\n        } else {\n          chunk = { type: 'write', data: chunk, position }\n        }\n\n        if (chunk.type === 'write') {\n          if (!('data' in chunk)) {\n            await send({ type: 'close' })\n            throw new DOMException(...SYNTAX('write requires a data argument'))\n          }\n\n          chunk.position ??= position\n\n          if (typeof chunk.data === 'string') {\n            chunk.data = textEncoder.encode(chunk.data)\n          }\n\n          else if (chunk.data instanceof ArrayBuffer) {\n            chunk.data = new Uint8Array(chunk.data)\n          }\n\n          else if (!(chunk.data instanceof Uint8Array) && ArrayBuffer.isView(chunk.data)) {\n            chunk.data = new Uint8Array(chunk.data.buffer, chunk.data.byteOffset, chunk.data.byteLength)\n          }\n\n          else if (!(chunk.data instanceof Uint8Array)) {\n            const ab = await new Response(chunk.data).arrayBuffer()\n            chunk.data = new Uint8Array(ab)\n          }\n\n          if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n            position = chunk.position\n          }\n          position += chunk.data.byteLength\n          size += chunk.data.byteLength\n        } else if (chunk.type === 'seek') {\n          if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n            if (size < chunk.position) {\n              throw new DOMException(...INVALID)\n            }\n            console.log('seeking', chunk)\n            position = chunk.position\n            return // Don't need to enqueue seek...\n          } else {\n            await send({ type: 'close' })\n            throw new DOMException(...SYNTAX('seek requires a position argument'))\n          }\n        } else if (chunk.type === 'truncate') {\n          if (Number.isInteger(chunk.size) && chunk.size >= 0) {\n            size = chunk.size\n            if (position > size) { position = size }\n          } else {\n            await send({ type: 'close' })\n            throw new DOMException(...SYNTAX('truncate requires a size argument'))\n          }\n        }\n\n        await send(chunk)\n      },\n      async close () {\n        await send({ type: 'close' })\n        worker.terminate()\n      },\n      async abort (reason) {\n        await send({ type: 'abort', reason })\n        worker.terminate()\n      },\n    })\n\n    return ws\n  }\n\n  const orig = FileSystemDirectoryHandle.prototype.getFileHandle\n  FileSystemDirectoryHandle.prototype.getFileHandle = async function (...args) {\n    const handle = await orig.call(this, ...args)\n    wm.set(handle, this)\n    return handle\n  }\n}\n\nexport default FileSystemFileHandle\nexport { FileSystemFileHandle }\n"],"names":["native","showDirectoryPicker","options","input","p","util","resolve","mod","def","showOpenFilePicker","opts","e","m","showSaveFilePicker","FileSystemFileHandle","FileSystemFileHandle$1","FileHandle","entry","FolderHandle","FileSystemDirectoryHandle","FileSystemDirectoryHandle$2","getOriginPrivateDirectory","driver","module","sandbox","config","WritableStream","FileSystemWritableFileStream","#writer","writer","w","position","size","data","result","kAdapter","FileSystemHandle","adapter","descriptor","mode","handle","other","errors","fromDataTransfer","entries","memory","fs","folder","getDirHandlesFromInput","files","rootName","root","file","path","name","dir","getFileHandlesFromInput","GONE","MOD_ERR","_","possibleDescendant","openSet","current","proto","ensureDoActuallyStillExist","removeEntry","err","INVALID","SYNTAX","wm","workerUrl","code","fileHandle","evt","port","cmd","stringCode","blob","worker","textEncoder","send","message","reject","mc","parent","ctrl","chunk","ab","reason","orig","args"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}