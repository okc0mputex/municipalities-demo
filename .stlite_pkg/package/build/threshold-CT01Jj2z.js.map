{"version":3,"file":"threshold-CT01Jj2z.js","sources":["../../../node_modules/d3-array/src/ascending.js","../../../node_modules/d3-array/src/descending.js","../../../node_modules/d3-array/src/bisector.js","../../../node_modules/d3-array/src/number.js","../../../node_modules/d3-array/src/bisect.js","../../../node_modules/d3-array/src/ticks.js","../../../node_modules/d3-format/src/precisionFixed.js","../../../node_modules/d3-format/src/precisionPrefix.js","../../../node_modules/d3-format/src/precisionRound.js","../../../node_modules/d3-scale/src/init.js","../../../node_modules/d3-interpolate/src/round.js","../../../node_modules/d3-scale/src/constant.js","../../../node_modules/d3-scale/src/number.js","../../../node_modules/d3-scale/src/continuous.js","../../../node_modules/d3-scale/src/tickFormat.js","../../../node_modules/d3-scale/src/linear.js","../../../node_modules/d3-scale/src/threshold.js"],"sourcesContent":["export default function ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","export default function descending(a, b) {\n  return a == null || b == null ? NaN\n    : b < a ? -1\n    : b > a ? 1\n    : b >= a ? 0\n    : NaN;\n}\n","import ascending from \"./ascending.js\";\nimport descending from \"./descending.js\";\n\nexport default function bisector(f) {\n  let compare1, compare2, delta;\n\n  // If an accessor is specified, promote it to a comparator. In this case we\n  // can test whether the search value is (self-) comparable. We can’t do this\n  // for a comparator (except for specific, known comparators) because we can’t\n  // tell if the comparator is symmetric, and an asymmetric comparator can’t be\n  // used to test whether a single value is comparable.\n  if (f.length !== 2) {\n    compare1 = ascending;\n    compare2 = (d, x) => ascending(f(d), x);\n    delta = (d, x) => f(d) - x;\n  } else {\n    compare1 = f === ascending || f === descending ? f : zero;\n    compare2 = f;\n    delta = f;\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction zero() {\n  return 0;\n}\n","export default function number(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","import ascending from \"./ascending.js\";\nimport bisector from \"./bisector.js\";\nimport number from \"./number.js\";\n\nconst ascendingBisect = bisector(ascending);\nexport const bisectRight = ascendingBisect.right;\nexport const bisectLeft = ascendingBisect.left;\nexport const bisectCenter = bisector(number).center;\nexport default bisectRight;\n","const e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nfunction tickSpec(start, stop, count) {\n  const step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log10(step)),\n      error = step / Math.pow(10, power),\n      factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;\n  let i1, i2, inc;\n  if (power < 0) {\n    inc = Math.pow(10, -power) / factor;\n    i1 = Math.round(start * inc);\n    i2 = Math.round(stop * inc);\n    if (i1 / inc < start) ++i1;\n    if (i2 / inc > stop) --i2;\n    inc = -inc;\n  } else {\n    inc = Math.pow(10, power) * factor;\n    i1 = Math.round(start / inc);\n    i2 = Math.round(stop / inc);\n    if (i1 * inc < start) ++i1;\n    if (i2 * inc > stop) --i2;\n  }\n  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);\n  return [i1, i2, inc];\n}\n\nexport default function ticks(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  if (!(count > 0)) return [];\n  if (start === stop) return [start];\n  const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);\n  if (!(i2 >= i1)) return [];\n  const n = i2 - i1 + 1, ticks = new Array(n);\n  if (reverse) {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) * inc;\n  } else {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) * inc;\n  }\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  return tickSpec(start, stop, count)[2];\n}\n\nexport function tickStep(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);\n  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","export function initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nexport function initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: {\n      if (typeof domain === \"function\") this.interpolator(domain);\n      else this.range(domain);\n      break;\n    }\n    default: {\n      this.domain(domain);\n      if (typeof interpolator === \"function\") this.interpolator(interpolator);\n      else this.range(interpolator);\n      break;\n    }\n  }\n  return this;\n}\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return Math.round(a * (1 - t) + b * t);\n  };\n}\n","export default function constants(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function number(x) {\n  return +x;\n}\n","import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport constant from \"./constant.js\";\nimport number from \"./number.js\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous() {\n  return transformer()(identity, identity);\n}\n","import {tickStep} from \"d3-array\";\nimport {format, formatPrefix, formatSpecifier, precisionFixed, precisionPrefix, precisionRound} from \"d3-format\";\n\nexport default function tickFormat(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n","import {ticks, tickIncrement} from \"d3-array\";\nimport continuous, {copy} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport tickFormat from \"./tickFormat.js\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain();\n    var i0 = 0;\n    var i1 = d.length - 1;\n    var start = d[i0];\n    var stop = d[i1];\n    var prestep;\n    var step;\n    var maxIter = 10;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n    \n    while (maxIter-- > 0) {\n      step = tickIncrement(start, stop, count);\n      if (step === prestep) {\n        d[i0] = start\n        d[i1] = stop\n        return domain(d);\n      } else if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n      } else {\n        break;\n      }\n      prestep = step;\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous();\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n","import {bisect} from \"d3-array\";\nimport {initRange} from \"./init.js\";\n\nexport default function threshold() {\n  var domain = [0.5],\n      range = [0, 1],\n      unknown,\n      n = 1;\n\n  function scale(x) {\n    return x != null && x <= x ? range[bisect(domain, x, 0, n)] : unknown;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return threshold()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n"],"names":["ascending","a","b","descending","bisector","f","compare1","compare2","delta","d","x","zero","left","lo","hi","mid","right","center","i","number","numbers","values","valueof","value","index","ascendingBisect","bisectRight","bisectLeft","e10","e5","e2","tickSpec","start","stop","count","step","power","error","factor","i1","i2","inc","ticks","reverse","n","tickIncrement","tickStep","precisionFixed","exponent","precisionPrefix","precisionRound","max","initRange","domain","range","initInterpolator","interpolator","interpolateRound","t","constants","unit","identity","normalize","constant","clamper","bimap","interpolate","d0","d1","r0","r1","polymap","j","r","bisect","copy","source","target","transformer","interpolateValue","transform","untransform","unknown","clamp","piecewise","output","input","rescale","scale","y","interpolateNumber","_","u","continuous","tickFormat","specifier","precision","formatSpecifier","formatPrefix","format","linearish","i0","prestep","maxIter","linear","threshold"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}