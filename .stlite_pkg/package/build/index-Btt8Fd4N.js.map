{"version":3,"file":"index-Btt8Fd4N.js","sources":["../../../streamlit/frontend/lib/src/components/elements/ImageList/styled-components.ts","../../../streamlit/frontend/lib/src/components/elements/ImageList/ImageList.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledImageList = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  // Not supported in Safari, but at least it's not a regression for those users:\n  rowGap: theme.spacing.lg,\n  maxWidth: \"100%\",\n  width: \"fit-content\",\n}))\n\nexport const StyledImageContainer = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"stretch\",\n  width: \"auto\",\n  flexGrow: 0,\n\n  \">img\": {\n    borderRadius: theme.radii.default,\n  },\n}))\n\nexport const StyledCaption = styled.div(({ theme }) => ({\n  textAlign: \"center\",\n  marginTop: theme.spacing.xs,\n  wordWrap: \"break-word\",\n  padding: theme.spacing.threeXS,\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n * Copyright (c) Yuichiro Tachibana (Tsuchiya) (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { CSSProperties, memo, ReactElement } from \"react\"\n\nimport { getLogger } from \"loglevel\"\n\nimport {\n  ImageList as ImageListProto,\n  Image as ImageProto,\n} from \"@streamlit/protobuf\"\n\nimport { ElementFullscreenContext } from \"~lib/components/shared/ElementFullscreen/ElementFullscreenContext\"\nimport { withFullScreenWrapper } from \"~lib/components/shared/FullScreenWrapper\"\nimport StreamlitMarkdown from \"~lib/components/shared/StreamlitMarkdown\"\nimport Toolbar, {\n  StyledToolbarElementContainer,\n} from \"~lib/components/shared/Toolbar\"\nimport { useCrossOriginAttribute } from \"~lib/hooks/useCrossOriginAttribute\"\nimport { useRequiredContext } from \"~lib/hooks/useRequiredContext\"\nimport { StreamlitEndpoints } from \"~lib/StreamlitEndpoints\"\n\nimport { useStliteMediaObjects } from \"@stlite/kernel\"\n\nimport {\n  StyledCaption,\n  StyledImageContainer,\n  StyledImageList,\n} from \"./styled-components\"\n\nconst LOG = getLogger(\"ImageList\")\n\nexport interface ImageListProps {\n  endpoints: StreamlitEndpoints\n  element: ImageListProto\n  disableFullscreenMode?: boolean\n}\n\n/**\n * @see WidthBehavior on the Backend\n * @see the Image.proto file\n */\nenum WidthBehavior {\n  OriginalWidth = -1,\n  /** @deprecated */\n  ColumnWidth = -2,\n  /** @deprecated */\n  AutoWidth = -3,\n  MinImageOrContainer = -4,\n  MaxImageOrContainer = -5,\n}\n\nconst Image = ({\n  itemKey,\n  image,\n  imgStyle,\n  buildMediaURL,\n  handleImageError,\n}: {\n  itemKey: string\n  image: ImageProto\n  imgStyle: CSSProperties\n  buildMediaURL: (url: string) => string\n  handleImageError: (e: React.SyntheticEvent<HTMLImageElement>) => void\n}): ReactElement => {\n  const crossOrigin = useCrossOriginAttribute(image.url)\n  return (\n    <StyledImageContainer data-testid=\"stImageContainer\">\n      <img\n        style={imgStyle}\n        src={buildMediaURL(image.url)}\n        alt={itemKey}\n        onError={handleImageError}\n        crossOrigin={crossOrigin}\n      />\n      {image.caption && (\n        <StyledCaption data-testid=\"stImageCaption\" style={imgStyle}>\n          <StreamlitMarkdown\n            source={image.caption}\n            allowHTML={false}\n            isCaption\n            // This is technically not a label but we want the same restrictions\n            // as for labels (e.g. no Markdown tables or horizontal rule).\n            isLabel\n          />\n        </StyledCaption>\n      )}\n    </StyledImageContainer>\n  )\n}\n\n/**\n * Functional element for a horizontal list of images.\n */\nfunction ImageList({\n  element,\n  endpoints,\n  disableFullscreenMode,\n}: Readonly<ImageListProps>): ReactElement {\n  const images = useStliteMediaObjects(element.imgs)\n\n  const {\n    expanded: isFullScreen,\n    width,\n    height,\n    expand,\n    collapse,\n  } = useRequiredContext(ElementFullscreenContext)\n  // The width of the element is the width of the container, not necessarily the image.\n  const elementWidth = width || 0\n  // The width field in the proto sets the image width, but has special\n  // cases the values in the WidthBehavior enum.\n  let imageWidth: number | undefined\n  const protoWidth = element.width\n\n  if (\n    [\n      WidthBehavior.OriginalWidth,\n      WidthBehavior.AutoWidth,\n      WidthBehavior.MinImageOrContainer,\n    ].includes(protoWidth)\n  ) {\n    // Use the original image width.\n    imageWidth = undefined\n  } else if (\n    [WidthBehavior.ColumnWidth, WidthBehavior.MaxImageOrContainer].includes(\n      protoWidth\n    )\n  ) {\n    // Use the full element width (which handles the full screen case)\n    imageWidth = elementWidth\n  } else if (protoWidth > 0) {\n    // Set the image width explicitly.\n    imageWidth = protoWidth\n  } else {\n    throw Error(`Invalid image width: ${protoWidth}`)\n  }\n\n  const imgStyle: CSSProperties = {}\n\n  if (height && isFullScreen) {\n    imgStyle.maxHeight = height\n    imgStyle.objectFit = \"contain\"\n    // @see issue https://github.com/streamlit/streamlit/issues/10904\n    // Ensure the image tries to fill the width to prevent sizeless SVGs from\n    // not rendering. Let object-fit handle aspect ratio.\n    imgStyle.width = \"100%\"\n  } else {\n    // @see issue https://github.com/streamlit/streamlit/issues/10904\n    // Use imageWidth if defined, otherwise fallback to 100% to prevent sizeless\n    // SVGs from not rendering.\n    imgStyle.width = imageWidth ?? \"100%\"\n    // Cap the image width, so it doesn't exceed its parent container width\n    imgStyle.maxWidth = \"100%\"\n  }\n\n  const handleImageError = (\n    e: React.SyntheticEvent<HTMLImageElement>\n  ): void => {\n    const imageUrl = e.currentTarget.src\n    LOG.error(`Client Error: Image source error - ${imageUrl}`)\n    endpoints.sendClientErrorToHost(\n      \"Image\",\n      \"Image source failed to load\",\n      \"onerror triggered\",\n      imageUrl\n    )\n  }\n\n  return (\n    <StyledToolbarElementContainer\n      width={elementWidth}\n      height={height}\n      useContainerWidth={isFullScreen}\n      topCentered\n    >\n      <Toolbar\n        target={StyledToolbarElementContainer}\n        isFullScreen={isFullScreen}\n        onExpand={expand}\n        onCollapse={collapse}\n        disableFullscreenMode={disableFullscreenMode}\n      ></Toolbar>\n      <StyledImageList className=\"stImage\" data-testid=\"stImage\">\n        {images.map(\n          (iimage, idx): ReactElement => (\n            <Image\n              // TODO: Update to match React best practices\n              // eslint-disable-next-line @eslint-react/no-array-index-key\n              key={idx}\n              itemKey={idx.toString()}\n              image={iimage as ImageProto}\n              imgStyle={imgStyle}\n              buildMediaURL={(url: string) => endpoints.buildMediaURL(url)}\n              handleImageError={handleImageError}\n            />\n          )\n        )}\n      </StyledImageList>\n    </StyledToolbarElementContainer>\n  )\n}\n\nconst ImageListWithFullScreen = withFullScreenWrapper(ImageList)\nexport default memo(ImageListWithFullScreen)\n"],"names":["StyledImageList","_styled","target","theme","display","flexDirection","flexWrap","rowGap","spacing","lg","maxWidth","width","StyledImageContainer","alignItems","flexGrow","borderRadius","radii","default","StyledCaption","textAlign","marginTop","xs","wordWrap","padding","threeXS","LOG","getLogger","Image","itemKey","image","imgStyle","buildMediaURL","handleImageError","crossOrigin","useCrossOriginAttribute","url","jsxs","jsx","caption","StreamlitMarkdown","ImageList","element","endpoints","disableFullscreenMode","images","useStliteMediaObjects","imgs","expanded","isFullScreen","height","expand","collapse","useRequiredContext","ElementFullscreenContext","elementWidth","imageWidth","protoWidth","WidthBehavior","includes","undefined","Error","maxHeight","objectFit","e","imageUrl","currentTarget","src","error","sendClientErrorToHost","StyledToolbarElementContainer","Toolbar","map","iimage","idx","toString","ImageListWithFullScreen","withFullScreenWrapper","ImageList$1","memo"],"mappings":"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"}