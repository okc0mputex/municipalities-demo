{"version":3,"file":"index-SfUVNoWI.js","sources":["../../../streamlit/frontend/lib/src/components/elements/Spinner/styled-components.ts","../../../streamlit/frontend/lib/src/components/elements/Spinner/utils.ts","../../../streamlit/frontend/lib/src/components/elements/Spinner/Spinner.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\ninterface StyledSpinnerProps {\n  cache: boolean\n}\n\nexport const StyledSpinner = styled.div<StyledSpinnerProps>(\n  ({ theme, cache }) => ({\n    ...(cache\n      ? {\n          paddingBottom: theme.spacing.lg,\n          background: `linear-gradient(to bottom, ${theme.colors.bgColor} 0%, ${theme.colors.bgColor} 80%, transparent 100%)`,\n        }\n      : null),\n  })\n)\n\nexport const StyledSpinnerContainer = styled.div({\n  display: \"flex\",\n  alignItems: \"center\",\n  width: \"100%\",\n})\n\nexport const StyledSpinnerText = styled.div(({ theme }) => ({\n  display: \"flex\",\n  gap: theme.spacing.sm,\n  alignItems: \"baseline\",\n}))\n\n// TODO: Maybe move this to `theme/consts.ts`, see\n// https://github.com/streamlit/streamlit/pull/10085/files#diff-a5cce939bf6c73209a258132c71ccb368a3a1fd57b68b373d242736adb920093\nexport const StyledSpinnerTimeText = styled.div(({ theme }) => ({\n  opacity: 0.6,\n  fontSize: theme.fontSizes.sm,\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Formats a duration in seconds into a human-readable string.\n *\n * @param seconds - The duration in seconds to format\n * @returns A formatted string representation of the duration in parentheses\n *\n * @example\n * formatTime(1.1)    // \"(1.1 seconds)\"\n * formatTime(65.3)   // \"(1 minute, 5.3 seconds)\"\n * formatTime(3661.1) // \"(1 hour, 1 minute, 1.1 seconds)\"\n *\n * TODO: In the future, we might want to replace this with `Intl.DurationFormat` (see\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat).\n * But that API is not available on Firefox yet.\n */\nexport const formatTime = (seconds: number): string => {\n  const hours = Math.floor(seconds / 3600)\n  const mins = Math.floor((seconds % 3600) / 60)\n  const secs = seconds % 60\n\n  if (hours === 0 && mins === 0) {\n    return `(${secs.toFixed(1)} seconds)`\n  }\n\n  if (hours === 0) {\n    const minText = `${mins} minute${mins === 1 ? \"\" : \"s\"}`\n    const secText = secs === 0 ? \"\" : `, ${secs.toFixed(1)} seconds`\n    return `(${minText}${secText})`\n  }\n\n  const hourText = `${hours} hour${hours === 1 ? \"\" : \"s\"}`\n  const minText = mins === 0 ? \"\" : `, ${mins} minute${mins === 1 ? \"\" : \"s\"}`\n  const secText = secs === 0 ? \"\" : `, ${secs.toFixed(1)} seconds`\n  return `(${hourText}${minText}${secText})`\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { memo, ReactElement, useEffect, useRef, useState } from \"react\"\n\nimport classNames from \"classnames\"\n\nimport { Spinner as SpinnerProto } from \"@streamlit/protobuf\"\n\nimport { StyledSpinnerIcon } from \"~lib/components/shared/Icon\"\nimport StreamlitMarkdown from \"~lib/components/shared/StreamlitMarkdown\"\n\nimport {\n  StyledSpinner,\n  StyledSpinnerContainer,\n  StyledSpinnerText,\n  StyledSpinnerTimeText,\n} from \"./styled-components\"\nimport { formatTime } from \"./utils\"\n\nexport interface SpinnerProps {\n  element: SpinnerProto\n}\n\nfunction Spinner({ element }: Readonly<SpinnerProps>): ReactElement {\n  const { cache, showTime } = element\n  const [elapsedTime, setElapsedTime] = useState(0)\n  const initialTimeRef = useRef<number | null>(null)\n\n  useEffect(() => {\n    if (!showTime) return\n\n    // Record the start time when the component mounts\n    initialTimeRef.current = Date.now()\n\n    const updateElapsedTime = (): void => {\n      if (initialTimeRef.current !== null) {\n        const currentTime = Date.now()\n        const elapsed = (currentTime - initialTimeRef.current) / 1000 // Convert to seconds\n        setElapsedTime(elapsed)\n      }\n    }\n\n    // Update immediately\n    updateElapsedTime()\n\n    // Set up interval to update every 100ms\n    const timer = setInterval(updateElapsedTime, 100)\n\n    return () => clearInterval(timer)\n  }, [showTime])\n\n  return (\n    <StyledSpinner\n      className={classNames({ stSpinner: true, stCacheSpinner: cache })}\n      data-testid=\"stSpinner\"\n      cache={cache}\n    >\n      <StyledSpinnerContainer>\n        <StyledSpinnerIcon size=\"base\" margin=\"0 md 0 0\" padding=\"0\" />\n        <StyledSpinnerText>\n          <StreamlitMarkdown source={element.text} allowHTML={false} />\n          {showTime && (\n            <StyledSpinnerTimeText>\n              {formatTime(elapsedTime)}\n            </StyledSpinnerTimeText>\n          )}\n        </StyledSpinnerText>\n      </StyledSpinnerContainer>\n    </StyledSpinner>\n  )\n}\n\nexport default memo(Spinner)\n"],"names":["StyledSpinner","_styled","target","theme","cache","paddingBottom","spacing","lg","background","colors","bgColor","StyledSpinnerContainer","name","styles","StyledSpinnerText","display","gap","sm","alignItems","StyledSpinnerTimeText","opacity","fontSize","fontSizes","formatTime","seconds","hours","Math","floor","mins","secs","toFixed","minText","secText","hourText","Spinner","element","showTime","elapsedTime","setElapsedTime","useState","initialTimeRef","useRef","useEffect","current","Date","now","updateElapsedTime","elapsed","timer","setInterval","clearInterval","jsx","classNames","stSpinner","stCacheSpinner","StyledSpinnerIcon","StreamlitMarkdown","text","Spinner$1","memo"],"mappings":"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"}