{"version":3,"file":"mergeWith-D-PtJ-fs.js","sources":["../../../node_modules/lodash/mergeWith.js"],"sourcesContent":["var baseMerge = require('./_baseMerge'),\n    createAssigner = require('./_createAssigner');\n\n/**\n * This method is like `_.merge` except that it accepts `customizer` which\n * is invoked to produce the merged values of the destination and source\n * properties. If `customizer` returns `undefined`, merging is handled by the\n * method instead. The `customizer` is invoked with six arguments:\n * (objValue, srcValue, key, object, source, stack).\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} sources The source objects.\n * @param {Function} customizer The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   if (_.isArray(objValue)) {\n *     return objValue.concat(srcValue);\n *   }\n * }\n *\n * var object = { 'a': [1], 'b': [2] };\n * var other = { 'a': [3], 'b': [4] };\n *\n * _.mergeWith(object, other, customizer);\n * // => { 'a': [1, 3], 'b': [2, 4] }\n */\nvar mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n  baseMerge(object, source, srcIndex, customizer);\n});\n\nmodule.exports = mergeWith;\n"],"names":["baseMerge","require$$0","createAssigner","require$$1","mergeWith","object","source","srcIndex","customizer","mergeWith_1"],"mappings":";;;;;AAAA,MAAIA,IAAYC,EAAA,GACZC,IAAiBC,EAAA,GAiCjBC,IAAYF,EAAe,SAASG,GAAQC,GAAQC,GAAUC,GAAY;AAC5E,IAAAR,EAAUK,GAAQC,GAAQC,GAAUC,CAAU;AAAA,EAChD,CAAC;AAED,SAAAC,IAAiBL;;;;","x_google_ignoreList":[0]}