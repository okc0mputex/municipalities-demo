{"version":3,"file":"index-BE0YxeS6.js","sources":["../../../streamlit/frontend/lib/src/components/widgets/ColorPicker/ColorPicker.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { FC, memo, useCallback } from \"react\"\n\nimport { ColorPicker as ColorPickerProto } from \"@streamlit/protobuf\"\n\nimport BaseColorPicker from \"~lib/components/shared/BaseColorPicker\"\nimport {\n  useBasicWidgetState,\n  ValueWithSource,\n} from \"~lib/hooks/useBasicWidgetState\"\nimport { labelVisibilityProtoValueToEnum } from \"~lib/util/utils\"\nimport { WidgetStateManager } from \"~lib/WidgetStateManager\"\n\nexport interface Props {\n  disabled: boolean\n  element: ColorPickerProto\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n}\n\n/**\n * The value specified by the user via the UI. If the user didn't touch this\n * widget's UI, the default value is used.\n */\ntype ColorPickerValue = string\n\nconst getStateFromWidgetMgr = (\n  widgetMgr: WidgetStateManager,\n  element: ColorPickerProto\n): ColorPickerValue | undefined => {\n  return widgetMgr.getStringValue(element)\n}\n\nconst getDefaultStateFromProto = (\n  element: ColorPickerProto\n): ColorPickerValue => {\n  return element.default ?? null\n}\n\nconst getCurrStateFromProto = (\n  element: ColorPickerProto\n): ColorPickerValue => {\n  return element.value ?? null\n}\n\nconst updateWidgetMgrState = (\n  element: ColorPickerProto,\n  widgetMgr: WidgetStateManager,\n  valueWithSource: ValueWithSource<ColorPickerValue>,\n  fragmentId?: string\n): void => {\n  widgetMgr.setStringValue(\n    element,\n    valueWithSource.value,\n    { fromUi: valueWithSource.fromUi },\n    fragmentId\n  )\n}\n\nconst ColorPicker: FC<Props> = ({\n  element,\n  disabled,\n  widgetMgr,\n  fragmentId,\n}) => {\n  const [value, setValueWithSource] = useBasicWidgetState<\n    ColorPickerValue,\n    ColorPickerProto\n  >({\n    getStateFromWidgetMgr,\n    getDefaultStateFromProto,\n    getCurrStateFromProto,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n  })\n\n  const handleColorClose = useCallback(\n    (color: string): void => {\n      setValueWithSource({ value: color, fromUi: true })\n    },\n    [setValueWithSource]\n  )\n\n  return (\n    <BaseColorPicker\n      label={element.label}\n      labelVisibility={labelVisibilityProtoValueToEnum(\n        element.labelVisibility?.value\n      )}\n      help={element.help}\n      onChange={handleColorClose}\n      disabled={disabled}\n      value={value}\n    />\n  )\n}\n\nexport default memo(ColorPicker)\n"],"names":["getStateFromWidgetMgr","widgetMgr","element","getStringValue","getDefaultStateFromProto","default","getCurrStateFromProto","value","updateWidgetMgrState","valueWithSource","fragmentId","setStringValue","fromUi","ColorPicker","disabled","setValueWithSource","useBasicWidgetState","handleColorClose","useCallback","color","BaseColorPicker","label","labelVisibilityProtoValueToEnum","labelVisibility","help","ColorPicker$1","memo"],"mappings":";;AAyCA,MAAMA,IAAwBA,CAC5BC,GACAC,MAEOD,EAAUE,eAAeD,CAAO,GAGnCE,IAA2BA,CAC/BF,MAEOA,EAAQG,WAAW,MAGtBC,IAAwBA,CAC5BJ,MAEOA,EAAQK,SAAS,MAGpBC,IAAuBA,CAC3BN,GACAD,GACAQ,GACAC,MACS;AACTT,EAAAA,EAAUU,eACRT,GACAO,EAAgBF,OAChB;AAAA,IAAEK,QAAQH,EAAgBG;AAAAA,EAAAA,GAC1BF,CACF;AACF,GAEMG,IAAyBA,CAAC;AAAA,EAC9BX,SAAAA;AAAAA,EACAY,UAAAA;AAAAA,EACAb,WAAAA;AAAAA,EACAS,YAAAA;AACF,MAAM;AACJ,QAAM,CAACH,GAAOQ,CAAkB,IAAIC,EAGlC;AAAA,IACAhB,uBAAAA;AAAAA,IACAI,0BAAAA;AAAAA,IACAE,uBAAAA;AAAAA,IACAE,sBAAAA;AAAAA,IACAN,SAAAA;AAAAA,IACAD,WAAAA;AAAAA,IACAS,YAAAA;AAAAA,EAAAA,CACD,GAEKO,IAAmBC,cACvB,CAACC,MAAwB;AACvBJ,IAAAA,EAAmB;AAAA,MAAER,OAAOY;AAAAA,MAAOP,QAAQ;AAAA,IAAA,CAAM;AAAA,EACnD,GACA,CAACG,CAAkB,CACrB;AAEA,+BACGK,GAAA,EACC,OAAOlB,EAAQmB,OACf,iBAAiBC,EACfpB,EAAQqB,iBAAiBhB,KAC3B,GACA,MAAML,EAAQsB,MACd,UAAUP,GACV,UAAAH,GACA,OAAAP,GAAa;AAGnB,GAEAkB,IAAeC,EAAAA,KAAKb,CAAW;"}